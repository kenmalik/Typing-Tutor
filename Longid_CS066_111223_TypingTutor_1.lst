Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/10/23 13:41:28
TypingTutor.asm						     Page 1 - 1


				; TypingTutor.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
TypingTutor.asm(7) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

				; Play area bounds
 = 00000002			VERTICAL_OFFSET = 2
 = 0000000A			HORIZONTAL_OFFSET = 10
 = 00000040			LINE_LENGTH = 64
 = 00000018			STARTING_DISTANCE = 24

				; File reading utilities
 = 00001388			BUFFER_SIZE = 5000
 =-00000001			FILE_UNREAD = -1

				; Game logic timing
 = 00000032			TICK = 50 ; in milliseconds
 = 00000014			SECOND_IN_TICKS = 20
 = 00000028			STARTING_PROGRESSION_SPEED = SECOND_IN_TICKS * 2

 00000000			.code
 00000000			main proc

 00000000			.data
					; Graphics elements
 00000000  00000040 [			divider BYTE LINE_LENGTH DUP("-"), 0
	    2D
	   ] 00
 00000041 2D 2D 2D 20 4C		endingMsg BYTE "--- Level Complete ---", 0
	   65 76 65 6C 20
	   43 6F 6D 70 6C
	   65 74 65 20 2D
	   2D 2D 00

					; For file handling
 00000058  00001388 [			typingPrompt BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 000013E0 00000000			typingPromptSize DWORD 0
 000013E4 54 65 78 74 2E		filename BYTE "Text.txt", 0
	   74 78 74 00
 000013ED 00000000			fileHandle HANDLE ?

					; Typing prompt data
 000013F1 00000000			typingPromptLeftBound DWORD 0
 000013F5 00000000			charIdx DWORD 0
 000013F9  00001387 [			textColors WORD LENGTHOF typingPrompt - 1 DUP(black+(white*16)), 0
	    00F0
	   ] 0000

					; Cursor position data
 00003B09 00				cursorX BYTE 0
 00003B0A 00				cursorY BYTE 0
 00003B0B 18				distanceFromTop BYTE STARTING_DISTANCE

					; Typing prompt display timing
 00003B0C 00				linePrintTicksElapsed BYTE 0
 00003B0D 00000000			linePrintCharIdx DWORD 0
 00003B11 28				lineProgressSpeed BYTE STARTING_PROGRESSION_SPEED
					

 00000000			.code
					; Clear screen to prevent weird screen color
 00000000  B8 0000000F			mov eax, white+(black*16)
 00000005  E8 00000000 E		call SetTextColor
 0000000A  E8 00000000 E		call Clrscr

					; Read file to memory
 0000000F  BA 000013E4 R		mov edx, OFFSET filename
 00000014  E8 00000166			call openFile
 00000019  83 F8 FF			cmp eax, FILE_UNREAD
 0000001C  0F 84 00000141		je quit
 00000022  E8 000001C1			call closeInputFile
					
					; Add top divider
 00000027  B8 0000000E			mov eax, yellow + (black * 16)
 0000002C  E8 00000000 E		call SetTextColor
					mGotoxy HORIZONTAL_OFFSET, VERTICAL_OFFSET - 1
 00000031  52		     1		push edx
 00000032  B6 01	     1		mov  dh,VERTICAL_OFFSET - 1
 00000034  B2 0A	     1		mov  dl,HORIZONTAL_OFFSET
 00000036  E8 00000000 E     1		call Gotoxy
 0000003B  5A		     1		pop  edx
					mWriteString OFFSET divider
 0000003C  52		     1		push edx
 0000003D  BA 00000000 R     1		mov  edx,OFFSET OFFSET divider
 00000042  E8 00000000 E     1		call WriteString
 00000047  5A		     1		pop  edx

					; Add bottom divider
					mGotoxy HORIZONTAL_OFFSET, VERTICAL_OFFSET + STARTING_DISTANCE
 00000048  52		     1		push edx
 00000049  B6 1A	     1		mov  dh,VERTICAL_OFFSET + STARTING_DISTANCE
 0000004B  B2 0A	     1		mov  dl,HORIZONTAL_OFFSET
 0000004D  E8 00000000 E     1		call Gotoxy
 00000052  5A		     1		pop  edx
					mWriteString OFFSET divider
 00000053  52		     1		push edx
 00000054  BA 00000000 R     1		mov  edx,OFFSET OFFSET divider
 00000059  E8 00000000 E     1		call WriteString
 0000005E  5A		     1		pop  edx

					; Set to standard color
 0000005F  B8 000000F0			mov eax, black + (white * 16)
 00000064  E8 00000000 E		call SetTextColor

					; Initial cursor positioning
 00000069  B6 02			mov dh, VERTICAL_OFFSET
 0000006B  02 35 00003B0B R		add dh, distanceFromTop
 00000071  B2 0A			mov dl, HORIZONTAL_OFFSET
 00000073  E8 000001EE			call UpdateCursorPos


 00000078			MainGameLoop:
 00000078  B8 00000032		    mov  eax, TICK    
 0000007D  E8 00000000 E	    call Delay           ; Delay to ensure proper key read

					; If time to print another line of text prompt, do so
 00000082  FE 05 00003B0C R		inc linePrintTicksElapsed
 00000088  A0 00003B11 R		mov al, lineProgressSpeed
 0000008D  38 05 00003B0C R		cmp linePrintTicksElapsed, al
 00000093  75 26			jne KeyRead						; Else, read key

					; If reached top of play area, game over
 00000095  FE 0D 00003B0B R		dec distanceFromTop
 0000009B  80 3D 00003B0B R		cmp distanceFromTop, -1			
	   FF
 000000A2  0F 84 000000BB		je quit

 000000A8  E8 0000024A			call NewPromptLine				; Print a new line of prompt
 000000AD  80 2D 00003B11 R		sub lineProgressSpeed, 1		; Increase the speed of progression
	   01
 000000B4  C6 05 00003B0C R		mov linePrintTicksElapsed, 0	; Reset tick counter for display
	   00

 000000BB			KeyRead:
 000000BB  E8 00000000 E	    call ReadKey			; look for keyboard input
 000000C0  74 B6		    jz   MainGameLoop		; no key pressed yet

					; If at bottom of play area, don't do anything
 000000C2  80 3D 00003B0A R		cmp cursorY, VERTICAL_OFFSET + STARTING_DISTANCE
	   1A
 000000C9  74 AD			je MainGameLoop
					
					; Check if backspace pressed
 000000CB  66| 83 FA 08			cmp dx, VK_BACK
 000000CF  75 10			jne checkCharEqual				; If not backspace, process inputted character

					; Backspace was pressed
 000000D1  80 3D 00003B09 R		cmp cursorX, HORIZONTAL_OFFSET	; If on char 0, don't do anything
	   0A
 000000D8  74 9E			je MainGameLoop

 000000DA  E8 000001E5			call ReplacePreviousChar
 000000DF  EB 97			jmp MainGameLoop

 000000E1			checkCharEqual:
					; Compare input with text
 000000E1  8B 3D 000013F5 R		mov edi, charIdx
 000000E7  3A 87 00000058 R		cmp    al, typingPrompt[edi]
 000000ED  75 0C			jne    charNotEqual

					; If character is equal
 000000EF  B8 0000002F			mov eax, white + (green * 16)
 000000F4  E8 0000014D			call WriteToColorArr
 000000F9  EB 0A			jmp lineEndCheck

 000000FB			charNotEqual:
 000000FB  B8 0000004F			mov eax, white + (red * 16)
 00000100  E8 00000141			call WriteToColorArr

 00000105			lineEndCheck:
 00000105  80 3D 00003B09 R		cmp cursorX, LINE_LENGTH + HORIZONTAL_OFFSET
	   4A
 0000010C  75 24			jne finishCheck

					; Clear completed lines
 0000010E  8A 35 00003B0A R		mov dh, cursorY
 00000114  B2 0A			mov dl, HORIZONTAL_OFFSET
 00000116  E8 0000014B			call UpdateCursorPos					; Move cursor position for display clearing
 0000011B  E8 0000017C			call ClearDisplayLine
 00000120  E8 00000161			call NewLine
 00000125  83 05 000013F1 R		add typingPromptLeftBound, LINE_LENGTH	; Move left bound for typing prompt forward
	   40
 0000012C  FE 05 00003B0B R		inc distanceFromTop						; Inc distance from top to account for cleared line

 00000132			finishCheck:
 00000132  FF 05 000013F5 R		inc    charIdx
					; If not finished yet
 00000138  80 BF 00000059 R		cmp    typingPrompt[edi + 1], 0
	   00
 0000013F  0F 85 FFFFFF33		jne    MainGameLoop

					; Level complete message
 00000145  E8 00000000 E		call Crlf
 0000014A  B8 0000002F			mov eax, white + (green * 16)
 0000014F  E8 00000000 E		call SetTextColor
 00000154  E8 00000000 E		call Crlf
 00000159  BA 00000041 R		mov edx, OFFSET endingMsg
 0000015E  E8 00000000 E		call WriteString

 00000163			quit:
 00000163  B8 0000000F			mov eax, white + (black * 16)
 00000168  E8 00000000 E		call SetTextColor
					mGotoxy 0, VERTICAL_OFFSET + STARTING_DISTANCE + 4
 0000016D  52		     1		push edx
 0000016E  B6 1E	     1		mov  dh,VERTICAL_OFFSET + STARTING_DISTANCE + 4
 00000170  B2 00	     1		mov  dl,0
 00000172  E8 00000000 E     1		call Gotoxy
 00000177  5A		     1		pop  edx
					invoke ExitProcess,0
 00000178  6A 00	   *	    push   +000000000h
 0000017A  E8 00000000 E   *	    call   ExitProcess
 0000017F			main endp


				;-------------------------------------------------------------------------------
				; openFile
				;
				; Opens the file whose name is stored in filename. Verifies file is opened and
				; that contents are within designated buffer size.
				; Receives: EDX = Offset of the filename to be opened.
				; Returns:  EAX = Bytes read (set to FILE_UNREAD if error occurs).
				;-------------------------------------------------------------------------------
 0000017F			openFile proc
 0000017F  E8 00000000 E		call OpenInputFile
 00000184  A3 000013ED R		mov fileHandle, eax

 00000189  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 0000018C  75 13			jne file_ok
					mWrite <"Cannot open file", 0dh, 0ah>
 00003B12		     1		.data		
 00003B12 43 61 6E 6E 6F     1		??0000 BYTE "Cannot open file", 0dh, 0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 0000018E		     1		.code
 0000018E  52		     1		push	edx
 0000018F  BA 00003B12 R     1		mov	edx,OFFSET ??0000
 00000194  E8 00000000 E     1		call	WriteString
 00000199  5A		     1		pop	edx
 0000019A  B8 FFFFFFFF			mov eax, FILE_UNREAD
 0000019F  EB 46			jmp quit

 000001A1			file_ok:
 000001A1  BA 00000058 R		mov edx, OFFSET typingPrompt
 000001A6  B9 00001388			mov ecx, BUFFER_SIZE
 000001AB  E8 00000000 E		call ReadFromFile
 000001B0  A3 000013E0 R		mov typingPromptSize, eax
 000001B5  73 18			jnc check_buffer_size
					mWrite "Error reading file. "
 00003B25		     1		.data		
 00003B25 45 72 72 6F 72     1		??0001 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 000001B7		     1		.code
 000001B7  52		     1		push	edx
 000001B8  BA 00003B25 R     1		mov	edx,OFFSET ??0001
 000001BD  E8 00000000 E     1		call	WriteString
 000001C2  5A		     1		pop	edx
 000001C3  E8 00000000 E		call WriteWindowsMsg
 000001C8  B8 FFFFFFFF			mov eax, FILE_UNREAD
 000001CD  EB 18			jmp quit
					
 000001CF			check_buffer_size:
 000001CF  3D 00001388			cmp eax, BUFFER_SIZE
 000001D4  72 11			jb quit
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 00003B3A		     1		.data		
 00003B3A 45 72 72 6F 72     1		??0002 BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 000001D6		     1		.code
 000001D6  52		     1		push	edx
 000001D7  BA 00003B3A R     1		mov	edx,OFFSET ??0002
 000001DC  E8 00000000 E     1		call	WriteString
 000001E1  5A		     1		pop	edx
 000001E2  B8 FFFFFFFF			mov eax, FILE_UNREAD

 000001E7			quit:
 000001E7  C3				ret
 000001E8			openFile endp


				;-------------------------------------------------------------------------------
				; CloseInputFile
				;
				; Closes the file currently in fileHandle.
				;-------------------------------------------------------------------------------
 000001E8			CloseInputFile proc USES eax
 000001E8  50		   *	    push   eax
 000001E9  A1 000013ED R		mov eax, fileHandle
 000001EE  E8 00000000 E		call CloseFile
					ret
 000001F3  58		   *	    pop    eax
 000001F4  C3		   *	    ret    00000h
 000001F5			CloseInputFile endp


				;-------------------------------------------------------------------------------
				; ReprintPrompt
				;
				; Reprints typing prompt using colors from text colors from colors array
				; Receives: EDX = OFFSET of typing prompt
				;			EBX = The index of typing prompt to start printing from
				;			ECX = The index of typing prompt to stop printing at
				;-------------------------------------------------------------------------------
 000001F5			ReprintPrompt proc USES edi
 000001F5  57		   *	    push   edi
 000001F6  BF 00000000		 	mov edi, 0				; Counter for if line length was reached
 000001FB  8A 04 1A			mov al, [edx + ebx]

 000001FE			printLoop:
					; If reached line length, start new line
 000001FE  83 FF 40			cmp edi, LINE_LENGTH
 00000201  75 0A			jne writeChars
 00000203  E8 0000007E			call NewLine
 00000208  BF 00000000			mov edi, 0

 0000020D			writeChars:
 0000020D  E8 00000016			call WriteFromColorArr

					; Break if end of string
 00000212  43				inc ebx
 00000213  47				inc edi
 00000214  8A 04 1A			mov al, [edx + ebx]
 00000217  3C 00			cmp al, 0
 00000219  75 07			jne continuePrintLoop

 0000021B  E8 0000007C			call ClearDisplayLine	; Clear the rest of the display line
 00000220  EB 04			jmp quit

 00000222			continuePrintLoop:
 00000222  3B D9			cmp ebx, ecx
 00000224  75 D8			jne printLoop
					
 00000226			quit:
					ret
 00000226  5F		   *	    pop    edi
 00000227  C3		   *	    ret    00000h
 00000228			ReprintPrompt endp


				;-------------------------------------------------------------------------------
				; WriteFromColorArr
				;
				; Writes a colored character to display
				; Receives: EBX = Index of character in array to write
				;-------------------------------------------------------------------------------
 00000228			WriteFromColorArr proc USES ecx
 00000228  51		   *	    push   ecx
 00000229  FE 05 00003B09 R		inc cursorX
 0000022F  B9 000013F9 R		mov ecx, OFFSET textColors	; Get a reference to text colors array

 00000234  8B 04 59			mov eax, [ecx + (ebx * TYPE textColors)]	; Select color from array
 00000237  E8 00000000 E		call SetTextColor

 0000023C  8A 04 1A			mov al, [edx + ebx]			; Write character in selected color
 0000023F  E8 00000000 E		call WriteChar
					
					ret
 00000244  59		   *	    pop    ecx
 00000245  C3		   *	    ret    00000h
 00000246			WriteFromColorArr endp


				;-------------------------------------------------------------------------------
				; WriteToColorArr
				;
				; Writes a charater in a given color and saves that color to textColors array.
				; Receives: EAX = the color to write in and save to textColors array
				;			EDI = the index of color array to write to.
				;-------------------------------------------------------------------------------
 00000246			WriteToColorArr proc
 00000246  E8 00000000 E		call SetTextColor
 0000024B  66| 89 04 7D			mov textColors[edi * TYPE textColors], ax	; Save color
	   000013F9 R
 00000253  0F B6 87			movzx eax, typingPrompt[edi]
	   00000058 R
 0000025A  E8 00000000 E		call WriteChar
 0000025F  FE 05 00003B09 R		inc cursorX
 00000265  C3				ret
 00000266			WriteToColorArr endp


				;-------------------------------------------------------------------------------
				; UpdateCursorPos
				;
				; Moves cursor to an (x,y) coordinate on screen and updates cursor location
				; varaibles accordingly.
				; Receives: DL = the x position to set cursor to
				;			DH = the y position to set cursor to
				;-------------------------------------------------------------------------------
 00000266			UpdateCursorPos proc
 00000266  88 15 00003B09 R		mov cursorX, dl
 0000026C  88 35 00003B0A R		mov cursorY, dh
					mGotoxy cursorX, cursorY
 00000272  52		     1		push edx
 00000273  8A 35 00003B0A R  1		mov  dh,cursorY
 00000279  8A 15 00003B09 R  1		mov  dl,cursorX
 0000027F  E8 00000000 E     1		call Gotoxy
 00000284  5A		     1		pop  edx
 00000285  C3				ret
 00000286			UpdateCursorPos endp


				;-------------------------------------------------------------------------------
				; NewLine
				;
				; Moves cursor to the next line in play area.
				;-------------------------------------------------------------------------------
 00000286			NewLine proc USES edx
 00000286  52		   *	    push   edx
 00000287  FE 05 00003B0A R		inc cursorY
 0000028D  8A 35 00003B0A R		mov dh, cursorY
 00000293  B2 0A			mov dl, HORIZONTAL_OFFSET
 00000295  E8 FFFFFFCC			call UpdateCursorPos
					ret
 0000029A  5A		   *	    pop    edx
 0000029B  C3		   *	    ret    00000h
 0000029C			NewLine endp


				;-------------------------------------------------------------------------------
				; ClearDisplayLine
				;
				; Clears a line of the play area starting from cursor's x coordinate.
				;-------------------------------------------------------------------------------
 0000029C			ClearDisplayLine proc USES eax
 0000029C  50		   *	    push   eax
 0000029D  B8 0000000F			mov eax, white+(black*16)
 000002A2  E8 00000000 E		call SetTextColor

 000002A7			spaceWrite:
					mWriteSpace
 00003B61		     1	.data
 00003B61  00000001 [	     1	??0003 BYTE 1 DUP(' '),0
	    20
	   ] 00
 000002A7		     1	.code
 000002A7  52		     1		push	edx
 000002A8  BA 00003B61 R     1		mov	edx,OFFSET ??0003
 000002AD  E8 00000000 E     1		call	WriteString
 000002B2  5A		     1		pop	edx
 000002B3  FE 05 00003B09 R		inc cursorX
 000002B9  80 3D 00003B09 R		cmp cursorX, HORIZONTAL_OFFSET + LINE_LENGTH
	   4A
 000002C0  75 E5			jne spaceWrite
					
					ret
 000002C2  58		   *	    pop    eax
 000002C3  C3		   *	    ret    00000h
 000002C4			ClearDisplayLine endp


				;-------------------------------------------------------------------------------
				; ReplacePreviousChar
				;
				; Reverts color of previous character in play area and updates text color array
				; accordingly.
				;-------------------------------------------------------------------------------
 000002C4			ReplacePreviousChar proc
 000002C4  FE 0D 00003B09 R		dec cursorX
 000002CA  8A 35 00003B0A R		mov dh, cursorY
 000002D0  8A 15 00003B09 R		mov dl, cursorX
 000002D6  E8 FFFFFF8B			call UpdateCursorPos           ; Move cursor to previous char

 000002DB  B8 000000F0			mov eax, black + (white * 16)  ; Reverting color of char (this moves cursor forward)
 000002E0  FF 0D 000013F5 R		dec charIdx         
 000002E6  8B 3D 000013F5 R		mov edi, charIdx
 000002EC  E8 FFFFFF55			call WriteToColorArr

 000002F1  E8 FFFFFF70			call UpdateCursorPos           ; Move cursor back to previous char's space

 000002F6  C3				ret
 000002F7			ReplacePreviousChar endp


				;-------------------------------------------------------------------------------
				; NewPromptLine
				;
				; Writes a new line in the typing prompt.
				;-------------------------------------------------------------------------------
 000002F7			NewPromptLine proc USES eax ebx ecx edx
					; Push cursor position to stack
 000002F7  50		   *	    push   eax
 000002F8  53		   *	    push   ebx
 000002F9  51		   *	    push   ecx
 000002FA  52		   *	    push   edx
 000002FB  66| 0F B6 05			movzx ax, cursorX
	   00003B09 R
 00000303  66| 50			push ax
 00000305  66| 0F B6 05			movzx ax, cursorY
	   00003B0A R
 0000030D  66| 50			push ax

					; Set cursor position to rewrite block of text
 0000030F  8A 35 00003B0B R		mov dh, distanceFromTop
 00000315  80 C6 02			add dh, VERTICAL_OFFSET
 00000318  B2 0A			mov dl, HORIZONTAL_OFFSET
 0000031A  E8 FFFFFF47			call UpdateCursorPos

					; Write text block
 0000031F  83 05 00003B0D R		add linePrintCharIdx, LINE_LENGTH
	   40
 00000326  BA 00000058 R		mov edx, OFFSET typingPrompt
 0000032B  8B 0D 00003B0D R		mov ecx, linePrintCharIdx
 00000331  8B 1D 000013F1 R		mov ebx, typingPromptLeftBound
 00000337  E8 FFFFFEB9			call ReprintPrompt
					
 0000033C  E8 FFFFFF45			call NewLine	; Move cursor to line below written prompt

					; If cursor is not at bottom of play area, clear the display line below prompt
 00000341  80 3D 00003B0A R		cmp cursorY, VERTICAL_OFFSET + STARTING_DISTANCE
	   1A
 00000348  74 05			je ReturnToOriginalPos
 0000034A  E8 FFFFFF4D			call ClearDisplayLine
					
 0000034F			ReturnToOriginalPos:
					; Pop original cursor position to return to former position
 0000034F  66| 58			pop ax
 00000351  FE C8			dec al			; Cursor y has to decrement to account for prompt having moved
 00000353  8A F0			mov dh, al
 00000355  66| 58			pop ax
 00000357  8A D0			mov dl, al
 00000359  E8 FFFFFF08			call UpdateCursorPos
					ret
 0000035E  5A		   *	    pop    edx
 0000035F  59		   *	    pop    ecx
 00000360  5B		   *	    pop    ebx
 00000361  58		   *	    pop    eax
 00000362  C3		   *	    ret    00000h
 00000363			NewPromptLine endp

				end main
Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/10/23 13:41:28
TypingTutor.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003B63 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000363 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearDisplayLine . . . . . . . .	P Near	 0000029C _TEXT	Length= 00000028 Public STDCALL
  spaceWrite . . . . . . . . . .	L Near	 000002A7 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseInputFile . . . . . . . . .	P Near	 000001E8 _TEXT	Length= 0000000D Public STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NewLine  . . . . . . . . . . . .	P Near	 00000286 _TEXT	Length= 00000016 Public STDCALL
NewPromptLine  . . . . . . . . .	P Near	 000002F7 _TEXT	Length= 0000006C Public STDCALL
  ReturnToOriginalPos  . . . . .	L Near	 0000034F _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReplacePreviousChar  . . . . . .	P Near	 000002C4 _TEXT	Length= 00000033 Public STDCALL
ReprintPrompt  . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 00000033 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 000001FE _TEXT	
  writeChars . . . . . . . . . .	L Near	 0000020D _TEXT	
  continuePrintLoop  . . . . . .	L Near	 00000222 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000226 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateCursorPos  . . . . . . . .	P Near	 00000266 _TEXT	Length= 00000020 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFromColorArr  . . . . . . .	P Near	 00000228 _TEXT	Length= 0000001E Public STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToColorArr  . . . . . . . .	P Near	 00000246 _TEXT	Length= 00000020 Public STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000017F Public STDCALL
  MainGameLoop . . . . . . . . .	L Near	 00000078 _TEXT	
  KeyRead  . . . . . . . . . . .	L Near	 000000BB _TEXT	
  checkCharEqual . . . . . . . .	L Near	 000000E1 _TEXT	
  charNotEqual . . . . . . . . .	L Near	 000000FB _TEXT	
  lineEndCheck . . . . . . . . .	L Near	 00000105 _TEXT	
  finishCheck  . . . . . . . . .	L Near	 00000132 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000163 _TEXT	
openFile . . . . . . . . . . . .	P Near	 0000017F _TEXT	Length= 00000069 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 000001A1 _TEXT	
  check_buffer_size  . . . . . .	L Near	 000001CF _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000001E7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00003B12 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00003B25 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00003B3A _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00003B61 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_UNREAD  . . . . . . . . . .	Number	 -00000001h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HORIZONTAL_OFFSET  . . . . . . .	Number	 0000000Ah   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LENGTH  . . . . . . . . . .	Number	 00000040h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SECOND_IN_TICKS  . . . . . . . .	Number	 00000014h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STARTING_DISTANCE  . . . . . . .	Number	 00000018h   
STARTING_PROGRESSION_SPEED . . .	Number	 00000028h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TICK . . . . . . . . . . . . . .	Number	 00000032h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VERTICAL_OFFSET  . . . . . . . .	Number	 00000002h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charIdx  . . . . . . . . . . . .	DWord	 000013F5 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00003B09 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00003B0A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
distanceFromTop  . . . . . . . .	Byte	 00003B0B _DATA	
divider  . . . . . . . . . . . .	Byte	 00000000 _DATA	
endingMsg  . . . . . . . . . . .	Byte	 00000041 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000013ED _DATA	
filename . . . . . . . . . . . .	Byte	 000013E4 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linePrintCharIdx . . . . . . . .	DWord	 00003B0D _DATA	
linePrintTicksElapsed  . . . . .	Byte	 00003B0C _DATA	
lineProgressSpeed  . . . . . . .	Byte	 00003B11 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
textColors . . . . . . . . . . .	Word	 000013F9 _DATA	
typingPromptLeftBound  . . . . .	DWord	 000013F1 _DATA	
typingPromptSize . . . . . . . .	DWord	 000013E0 _DATA	
typingPrompt . . . . . . . . . .	Byte	 00000058 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
