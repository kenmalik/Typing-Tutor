Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/09/23 22:02:30
TypingTutor.asm						     Page 1 - 1


				; TypingTutor.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
TypingTutor.asm(7) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 = 00000005			VERTICAL_OFFSET = 5
 = 00000014			HORIZONTAL_OFFSET = 20
 = 00000040			LINE_LENGTH = 64
 = 00000005			MAX_LINES = 5
 = 00001388			BUFFER_SIZE = 5000
 =-00000001			FILE_UNREAD = -1
 = 00000032			TICK = 50 ; in milliseconds
 = 00000014			SECOND_IN_TICKS = 20

 00000000			.code
 00000000			main proc

 00000000			.data
 00000000  00001388 [			typingPrompt BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 00001388 00000000			typingPromptSize DWORD 0
 0000138C 54 65 78 74 2E		filename BYTE "Text.txt", 0
	   74 78 74 00
 00001395 00000000			fileHandle HANDLE ?

 00001399  00001387 [			colors WORD LENGTHOF typingPrompt - 1 DUP(black+(white*16)), 0
	    00F0
	   ] 0000

 00003AA9 4C 65 76 65 6C		endingMsg BYTE "Level complete", 0
	   20 63 6F 6D 70
	   6C 65 74 65 00
					
					; Cursor position
 00003AB8 00				cursorX BYTE 0
 00003AB9 00				cursorY BYTE 0

 00003ABA 00				charIdx BYTE 0

 00003ABB 00				linePrintTicksElapsed BYTE 0
 00003ABC  00000040 [			lineToPrint BYTE LINE_LENGTH DUP("a"), 0
	    61
	   ] 00
 00003AFD 00000000			linePrintCharIdx DWORD 0
 00003B01 00				linePrintLineNum BYTE 0
 00003B02 0F				distanceFromTop BYTE 15

 00000000			.code
					; Set to standard color
 00000000  B8 000000F0			mov eax, black + (white * 16)
 00000005  E8 00000000 E		call SetTextColor

					; Write prompt from file
 0000000A  B8 000000F0			mov eax, black + (white * 16)
 0000000F  E8 00000000 E		call SetTextColor

 00000014  BA 0000138C R		mov edx, OFFSET filename
 00000019  E8 0000016D			call openFile
 0000001E  83 F8 FF			cmp eax, FILE_UNREAD
 00000021  0F 84 0000015D		je quit

 00000027  E8 000001C8			call closeInputFile
 0000002C  E8 00000000 E		call Crlf
					
					; Initial cursor positioning
 00000031  B6 05			mov dh, VERTICAL_OFFSET
 00000033  02 35 00003B02 R		add dh, distanceFromTop
 00000039  B2 14			mov dl, HORIZONTAL_OFFSET
 0000003B  E8 00000222			call UpdateCursorPos


 00000040			MainGameLoop:
 00000040  B8 00000032		    mov  eax, TICK    
 00000045  E8 00000000 E	    call Delay           ; Delay to ensure proper key read

					; --- WORK IN PROGRESS ---

 0000004A  FE 05 00003ABB R		inc linePrintTicksElapsed
 00000050  80 3D 00003ABB R		cmp linePrintTicksElapsed, SECOND_IN_TICKS * 2
	   28
 00000057  75 61			jne KeyRead

 00000059  FE 0D 00003B02 R		dec distanceFromTop
 0000005F  C6 05 00003ABB R		mov linePrintTicksElapsed, 0
	   00
 00000066  66| 0F B6 05			movzx ax, cursorX
	   00003AB8 R
 0000006E  66| 50			push ax
 00000070  66| 0F B6 05			movzx ax, cursorY
	   00003AB9 R
 00000078  66| 50			push ax

					; Set cursor position
 0000007A  8A 35 00003B02 R		mov dh, distanceFromTop
 00000080  80 C6 05			add dh, VERTICAL_OFFSET
 00000083  B2 14			mov dl, HORIZONTAL_OFFSET
 00000085  E8 000001D8			call updateCursorPos

					; Write string
 0000008A  83 05 00003AFD R		add linePrintCharIdx, LINE_LENGTH
	   40
 00000091  BA 00000000 R		mov edx, OFFSET typingPrompt
 00000096  8B 0D 00003AFD R		mov ecx, linePrintCharIdx
 0000009C  E8 0000018D			call PrintWithLineBreaks

					; Move cursor to line below
 000000A1  E8 000001DC			call NewLine

					; Write blank lines to clear old text
 000000A6  E8 000001ED			call ClearLine

					; Reset cursor position
 000000AB  66| 58			pop ax
 000000AD  FE C8			dec al
 000000AF  8A F0			mov dh, al
 000000B1  66| 58			pop ax
 000000B3  8A D0			mov dl, al
 000000B5  E8 000001A8			call updateCursorPos

					; ------------------------

 000000BA			KeyRead:

 000000BA  E8 00000000 E	    call ReadKey         ; look for keyboard input
 000000BF  0F 84 FFFFFF7B	    jz   MainGameLoop      ; no key pressed yet
					
					; Check if backspace pressed
 000000C5  66| 83 FA 08			cmp dx, VK_BACK
 000000C9  75 45			jne checkCharEqual

					; Backspace pressed
 000000CB  80 3D 00003AB8 R		cmp cursorX, HORIZONTAL_OFFSET                 ; If on char 0, don't do anything
	   14
 000000D2  0F 84 FFFFFF68		je MainGameLoop
					
					; Replacing the previous char
 000000D8  FE 0D 00003AB8 R		dec cursorX
 000000DE  FE 0D 00003ABA R		dec charIdx                    ; Move cursor to previous char
 000000E4  0F B6 35			movzx esi, charIdx
	   00003ABA R
 000000EB  8A 35 00003AB9 R		mov dh, cursorY
 000000F1  8A 15 00003AB8 R		mov dl, cursorX
 000000F7  E8 00000166			call UpdateCursorPos

 000000FC  B8 000000F0			mov eax, black + (white * 16)  ; Reverting color of char
 00000101  E8 000001AB			call UpdateChar
 00000106  E8 00000000 E		call Gotoxy                    ; Move cursor back to previous char's space
 0000010B  E9 FFFFFF30			jmp MainGameLoop                 ; Return to loop start

 00000110			checkCharEqual:
 00000110  FE 05 00003AB8 R		inc cursorX

 00000116  0F B6 35			movzx esi, charIdx
	   00003ABA R
					; Compare input with text
 0000011D  3A 86 00000000 R		cmp    al, typingPrompt[esi]
 00000123  75 0C			jne    charNotEqual

					; If character is equal
 00000125  B8 0000002F			mov eax, white + (green * 16)
 0000012A  E8 00000182			call UpdateChar
 0000012F  EB 0A			jmp lineEndCheck

 00000131			charNotEqual:
 00000131  B8 0000004F			mov eax, white + (red * 16)
 00000136  E8 00000176			call UpdateChar

 0000013B			lineEndCheck:
 0000013B  80 3D 00003AB8 R		cmp cursorX, LINE_LENGTH + HORIZONTAL_OFFSET
	   54
 00000142  75 05			jne finishCheck
 00000144  E8 00000139			call NewLine

 00000149			finishCheck:
 00000149  FE 05 00003ABA R		inc    charIdx
					; If not finished yet
 0000014F  80 BE 00000001 R		cmp    typingPrompt[esi + 1], 0
	   00
 00000156  0F 85 FFFFFEE4		jne    MainGameLoop

					; Level complete message
 0000015C  E8 00000000 E		call Crlf
 00000161  B8 0000002F			mov eax, white + (green * 16)
 00000166  E8 00000000 E		call SetTextColor
 0000016B  E8 00000000 E		call Crlf
 00000170  BA 00003AA9 R		mov edx, OFFSET endingMsg
 00000175  E8 00000000 E		call WriteString
					

					; Reset color
 0000017A  B8 0000000F			mov eax, white + (black * 16)
 0000017F  E8 00000000 E		call SetTextColor	

 00000184			quit:
					invoke ExitProcess,0
 00000184  6A 00	   *	    push   +000000000h
 00000186  E8 00000000 E   *	    call   ExitProcess
 0000018B			main endp


				;-------------------------------------------------------------------------------
				; openFile
				;
				; Opens the file whose name is stored in filename. Verifies file is opened and
				; that contents are within designated buffer size.
				; Receives: EDX = Offset of the filename to be opened.
				; Returns:  EAX = Bytes read (set to FILE_UNREAD if error occurs).
				;-------------------------------------------------------------------------------
 0000018B			openFile proc
 0000018B  E8 00000000 E		call OpenInputFile
 00000190  A3 00001395 R		mov fileHandle, eax

 00000195  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 00000198  75 13	jne file_ok
					mWrite <"Cannot open file", 0dh, 0ah>
 00003B03		     1		.data		
 00003B03 43 61 6E 6E 6F     1		??0000 BYTE "Cannot open file", 0dh, 0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 0000019A		     1		.code
 0000019A  52		     1		push	edx
 0000019B  BA 00003B03 R     1		mov	edx,OFFSET ??0000
 000001A0  E8 00000000 E     1		call	WriteString
 000001A5  5A		     1		pop	edx
 000001A6  B8 FFFFFFFF			mov eax, FILE_UNREAD
 000001AB  EB 46			jmp quit

 000001AD			file_ok:
 000001AD  BA 00000000 R		mov edx, OFFSET typingPrompt
 000001B2  B9 00001388			mov ecx, BUFFER_SIZE
 000001B7  E8 00000000 E		call ReadFromFile
 000001BC  A3 00001388 R		mov typingPromptSize, eax
 000001C1  73 18			jnc check_buffer_size
					mWrite "Error reading file. "
 00003B16		     1		.data		
 00003B16 45 72 72 6F 72     1		??0001 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 000001C3		     1		.code
 000001C3  52		     1		push	edx
 000001C4  BA 00003B16 R     1		mov	edx,OFFSET ??0001
 000001C9  E8 00000000 E     1		call	WriteString
 000001CE  5A		     1		pop	edx
 000001CF  E8 00000000 E		call WriteWindowsMsg
 000001D4  B8 FFFFFFFF			mov eax, FILE_UNREAD
 000001D9  EB 18			jmp quit
					
 000001DB			check_buffer_size:
 000001DB  3D 00001388			cmp eax, BUFFER_SIZE
 000001E0  72 11			jb quit
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 00003B2B		     1		.data		
 00003B2B 45 72 72 6F 72     1		??0002 BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 000001E2		     1		.code
 000001E2  52		     1		push	edx
 000001E3  BA 00003B2B R     1		mov	edx,OFFSET ??0002
 000001E8  E8 00000000 E     1		call	WriteString
 000001ED  5A		     1		pop	edx
 000001EE  B8 FFFFFFFF			mov eax, FILE_UNREAD

 000001F3			quit:
 000001F3  C3				ret
 000001F4			openFile endp


 000001F4			closeInputFile proc
 000001F4  A1 00001395 R		mov eax, fileHandle
 000001F9  E8 00000000 E		call CloseFile
 000001FE  C3				ret
 000001FF			closeInputFile endp


				;-------------------------------------------------------------------------------
				; WriteLine
				;
				; Writes a line of LINE_LENGTH length.
				; Receives: EBX = Starting index of text to be outputted
				;           EDX = Offset of the string to write.
				; Returns:  EBX = Index of text ended at
				;-------------------------------------------------------------------------------
 000001FF			WriteLine proc uses ecx
 000001FF  51		   *	    push   ecx
 00000200  B9 00000040			mov ecx, LINE_LENGTH
 00000205			lineWriter:
 00000205  8A 04 1A			mov al, [edx + ebx]
 00000208  3C 00			cmp al, 0
 0000020A  74 08			je quit
 0000020C  E8 00000000 E		call WriteChar
 00000211  43				inc ebx
 00000212  E2 F1			loop lineWriter

 00000214			quit:
					ret
 00000214  59		   *	    pop    ecx
 00000215  C3		   *	    ret    00000h
 00000216			WriteLine endp



				; EBX = Index of character in array to write
 00000216			WriteColorChar proc uses ecx
 00000216  51		   *	    push   ecx
 00000217  B9 00001399 R		mov ecx, OFFSET colors

 0000021C  8B 04 59			mov eax, [ecx + (ebx * TYPE colors)]
 0000021F  E8 00000000 E		call SetTextColor

 00000224  8A 04 1A			mov al, [edx + ebx]
 00000227  E8 00000000 E		call WriteChar
					
					ret
 0000022C  59		   *	    pop    ecx
 0000022D  C3		   *	    ret    00000h
 0000022E			WriteColorChar endp


				; EDX = Offset of string
				; ECX = Amount of characters to print
 0000022E			PrintWithLineBreaks proc
 0000022E  BB 00000000			mov ebx, 0
 00000233  BF 00000000			mov edi, 0				; Counter to if line length was reached
 00000238  8A 04 1A			mov al, [edx + ebx]

 0000023B			printLoop:
					; If reached line length, start new line
 0000023B  83 FF 40			cmp edi, LINE_LENGTH
 0000023E  75 0A			jne writeChars
 00000240  E8 0000003D			call NewLine
 00000245  BF 00000000			mov edi, 0

 0000024A			writeChars:
 0000024A  E8 FFFFFFC7			call WriteColorChar

					; Break if end of string
 0000024F  43				inc ebx
 00000250  47				inc edi
 00000251  8A 04 1A			mov al, [edx + ebx]
 00000254  3C 00			cmp al, 0
 00000256  75 07			jne continuePrintLoop

 00000258  E8 0000003B			call ClearLine
 0000025D  EB 02			jmp quit

 0000025F			continuePrintLoop:
 0000025F  E2 DA			loop PrintLoop
					
 00000261			quit:
 00000261  C3				ret
 00000262			PrintWithLineBreaks endp


 00000262			updateCursorPos proc
 00000262  88 15 00003AB8 R		mov cursorX, dl
 00000268  88 35 00003AB9 R		mov cursorY, dh
					mGotoxy cursorX, cursorY
 0000026E  52		     1		push edx
 0000026F  8A 35 00003AB9 R  1		mov  dh,cursorY
 00000275  8A 15 00003AB8 R  1		mov  dl,cursorX
 0000027B  E8 00000000 E     1		call Gotoxy
 00000280  5A		     1		pop  edx
 00000281  C3				ret
 00000282			updateCursorPos endp


 00000282			NewLine proc uses edx
 00000282  52		   *	    push   edx
 00000283  FE 05 00003AB9 R		inc cursorY
 00000289  8A 35 00003AB9 R		mov dh, cursorY
 0000028F  B2 14			mov dl, HORIZONTAL_OFFSET
 00000291  E8 FFFFFFCC			call updateCursorPos
					ret
 00000296  5A		   *	    pop    edx
 00000297  C3		   *	    ret    00000h
 00000298			NewLine endp


 00000298			clearLine proc uses eax
 00000298  50		   *	    push   eax
 00000299  B8 0000000F			mov eax, white+(black*16)
 0000029E  E8 00000000 E		call SetTextColor
					mWriteSpace LINE_LENGTH
 00003B52		     1	.data
 00003B52  00000040 [	     1	??0003 BYTE LINE_LENGTH DUP(' '),0
	    20
	   ] 00
 000002A3		     1	.code
 000002A3  52		     1		push	edx
 000002A4  BA 00003B52 R     1		mov	edx,OFFSET ??0003
 000002A9  E8 00000000 E     1		call	WriteString
 000002AE  5A		     1		pop	edx
					ret
 000002AF  58		   *	    pop    eax
 000002B0  C3		   *	    ret    00000h
 000002B1			clearLine endp

				; EAX = the color to write in and save to colors array
 000002B1			UpdateChar proc
 000002B1  E8 00000000 E		call SetTextColor
 000002B6  66| 89 04 75			mov colors[esi * TYPE colors], ax	; Save color
	   00001399 R
 000002BE  0F B6 86			movzx eax, typingPrompt[esi]
	   00000000 R
 000002C5  E8 00000000 E		call WriteChar
 000002CA  C3				ret
 000002CB			UpdateChar endp

				end main
Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/09/23 22:02:30
TypingTutor.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003B93 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002CB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NewLine  . . . . . . . . . . . .	P Near	 00000282 _TEXT	Length= 00000016 Public STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintWithLineBreaks  . . . . . .	P Near	 0000022E _TEXT	Length= 00000034 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 0000023B _TEXT	
  writeChars . . . . . . . . . .	L Near	 0000024A _TEXT	
  continuePrintLoop  . . . . . .	L Near	 0000025F _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000261 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateChar . . . . . . . . . . .	P Near	 000002B1 _TEXT	Length= 0000001A Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 00000216 _TEXT	Length= 00000018 Public STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteLine  . . . . . . . . . . .	P Near	 000001FF _TEXT	Length= 00000017 Public STDCALL
  lineWriter . . . . . . . . . .	L Near	 00000205 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000214 _TEXT	
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
clearLine  . . . . . . . . . . .	P Near	 00000298 _TEXT	Length= 00000019 Public STDCALL
closeInputFile . . . . . . . . .	P Near	 000001F4 _TEXT	Length= 0000000B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000018B Public STDCALL
  MainGameLoop . . . . . . . . .	L Near	 00000040 _TEXT	
  KeyRead  . . . . . . . . . . .	L Near	 000000BA _TEXT	
  checkCharEqual . . . . . . . .	L Near	 00000110 _TEXT	
  charNotEqual . . . . . . . . .	L Near	 00000131 _TEXT	
  lineEndCheck . . . . . . . . .	L Near	 0000013B _TEXT	
  finishCheck  . . . . . . . . .	L Near	 00000149 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000184 _TEXT	
openFile . . . . . . . . . . . .	P Near	 0000018B _TEXT	Length= 00000069 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 000001AD _TEXT	
  check_buffer_size  . . . . . .	L Near	 000001DB _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000001F3 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updateCursorPos  . . . . . . . .	P Near	 00000262 _TEXT	Length= 00000020 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00003B03 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00003B16 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00003B2B _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00003B52 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_UNREAD  . . . . . . . . . .	Number	 -00000001h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HORIZONTAL_OFFSET  . . . . . . .	Number	 00000014h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LENGTH  . . . . . . . . . .	Number	 00000040h   
MAX_LINES  . . . . . . . . . . .	Number	 00000005h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SECOND_IN_TICKS  . . . . . . . .	Number	 00000014h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TICK . . . . . . . . . . . . . .	Number	 00000032h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VERTICAL_OFFSET  . . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charIdx  . . . . . . . . . . . .	Byte	 00003ABA _DATA	
colors . . . . . . . . . . . . .	Word	 00001399 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00003AB8 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00003AB9 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
distanceFromTop  . . . . . . . .	Byte	 00003B02 _DATA	
endingMsg  . . . . . . . . . . .	Byte	 00003AA9 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00001395 _DATA	
filename . . . . . . . . . . . .	Byte	 0000138C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linePrintCharIdx . . . . . . . .	DWord	 00003AFD _DATA	
linePrintLineNum . . . . . . . .	Byte	 00003B01 _DATA	
linePrintTicksElapsed  . . . . .	Byte	 00003ABB _DATA	
lineToPrint  . . . . . . . . . .	Byte	 00003ABC _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
typingPromptSize . . . . . . . .	DWord	 00001388 _DATA	
typingPrompt . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
