Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/10/23 00:43:31
TypingTutor.asm						     Page 1 - 1


				; TypingTutor.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
TypingTutor.asm(7) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 = 00000002			VERTICAL_OFFSET = 2
 = 00000014			HORIZONTAL_OFFSET = 20
 = 00000040			LINE_LENGTH = 64
 = 00000018			STARTING_DISTANCE = 24
 = 00001388			BUFFER_SIZE = 5000
 =-00000001			FILE_UNREAD = -1
 = 00000032			TICK = 50 ; in milliseconds
 = 00000014			SECOND_IN_TICKS = 20

 00000000			.code
 00000000			main proc

 00000000			.data
 00000000  00000040 [			divider BYTE LINE_LENGTH DUP("-"), 0
	    2D
	   ] 00

 00000041  00001388 [			typingPrompt BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 000013C9 00000000			typingPromptSize DWORD 0
 000013CD 54 65 78 74 2E		filename BYTE "Text.txt", 0
	   74 78 74 00
 000013D6 00000000			fileHandle HANDLE ?

 000013DA 00000000			typingPromptLeftBound DWORD 0

 000013DE  00001387 [			colors WORD LENGTHOF typingPrompt - 1 DUP(black+(white*16)), 0
	    00F0
	   ] 0000

 00003AEE 4C 65 76 65 6C		endingMsg BYTE "Level complete", 0
	   20 63 6F 6D 70
	   6C 65 74 65 00
					
					; Cursor position
 00003AFD 00				cursorX BYTE 0
 00003AFE 00				cursorY BYTE 0
 00003AFF 18				distanceFromTop BYTE STARTING_DISTANCE

 00003B00 00000000			charIdx DWORD 0

 00003B04 00				linePrintTicksElapsed BYTE 0
 00003B05 00000000			linePrintCharIdx DWORD 0
 00003B09 28				lineProgressSpeed BYTE SECOND_IN_TICKS * 2
					

 00000000			.code
					; Read file to memory
 00000000  BA 000013CD R		mov edx, OFFSET filename
 00000005  E8 000001F5			call openFile
 0000000A  83 F8 FF			cmp eax, FILE_UNREAD
 0000000D  0F 84 000001D0		je quit

 00000013  E8 00000250			call closeInputFile
 00000018  E8 00000000 E		call Crlf
					
					; Add top divider
 0000001D  B8 0000000E			mov eax, yellow + (black * 16)
 00000022  E8 00000000 E		call SetTextColor
					mGotoxy HORIZONTAL_OFFSET, VERTICAL_OFFSET - 1
 00000027  52		     1		push edx
 00000028  B6 01	     1		mov  dh,VERTICAL_OFFSET - 1
 0000002A  B2 14	     1		mov  dl,HORIZONTAL_OFFSET
 0000002C  E8 00000000 E     1		call Gotoxy
 00000031  5A		     1		pop  edx
					mWriteString OFFSET divider
 00000032  52		     1		push edx
 00000033  BA 00000000 R     1		mov  edx,OFFSET OFFSET divider
 00000038  E8 00000000 E     1		call WriteString
 0000003D  5A		     1		pop  edx

					; Add bottom divider
					mGotoxy HORIZONTAL_OFFSET, VERTICAL_OFFSET + STARTING_DISTANCE + 1
 0000003E  52		     1		push edx
 0000003F  B6 1B	     1		mov  dh,VERTICAL_OFFSET + STARTING_DISTANCE + 1
 00000041  B2 14	     1		mov  dl,HORIZONTAL_OFFSET
 00000043  E8 00000000 E     1		call Gotoxy
 00000048  5A		     1		pop  edx
					mWriteString OFFSET divider
 00000049  52		     1		push edx
 0000004A  BA 00000000 R     1		mov  edx,OFFSET OFFSET divider
 0000004F  E8 00000000 E     1		call WriteString
 00000054  5A		     1		pop  edx

					; Set to standard color
 00000055  B8 000000F0			mov eax, black + (white * 16)
 0000005A  E8 00000000 E		call SetTextColor

					; Initial cursor positioning
 0000005F  B6 02			mov dh, VERTICAL_OFFSET
 00000061  02 35 00003AFF R		add dh, distanceFromTop
 00000067  B2 14			mov dl, HORIZONTAL_OFFSET
 00000069  E8 00000265			call UpdateCursorPos


 0000006E			MainGameLoop:
 0000006E  B8 00000032		    mov  eax, TICK    
 00000073  E8 00000000 E	    call Delay           ; Delay to ensure proper key read

					; --- WORK IN PROGRESS ---

					; If 2 seconds has passed, move text up one line
 00000078  FE 05 00003B04 R		inc linePrintTicksElapsed
 0000007E  A0 00003B09 R		mov al, lineProgressSpeed
 00000083  38 05 00003B04 R		cmp linePrintTicksElapsed, al
 00000089  75 7B			jne KeyRead

 0000008B  80 2D 00003B09 R		sub lineProgressSpeed, 1		; Increase the speed of progression
	   01
 00000092  FE 0D 00003AFF R		dec distanceFromTop
 00000098  80 3D 00003AFF R		cmp distanceFromTop, -1			; Game over condition
	   FF
 0000009F  0F 84 0000013E		je quit
 000000A5  C6 05 00003B04 R		mov linePrintTicksElapsed, 0
	   00

					; Push cursor position to stack
 000000AC  66| 0F B6 05			movzx ax, cursorX
	   00003AFD R
 000000B4  66| 50			push ax
 000000B6  66| 0F B6 05			movzx ax, cursorY
	   00003AFE R
 000000BE  66| 50			push ax

					; Set cursor position to rewrite block of text
 000000C0  8A 35 00003AFF R		mov dh, distanceFromTop
 000000C6  80 C6 02			add dh, VERTICAL_OFFSET
 000000C9  B2 14			mov dl, HORIZONTAL_OFFSET
 000000CB  E8 00000203			call UpdateCursorPos

					; Write string
 000000D0  83 05 00003B05 R		add linePrintCharIdx, LINE_LENGTH
	   40
 000000D7  BA 00000041 R		mov edx, OFFSET typingPrompt
 000000DC  8B 0D 00003B05 R		mov ecx, linePrintCharIdx
 000000E2  8B 1D 000013DA R		mov ebx, typingPromptLeftBound
 000000E8  E8 000001B5			call PrintWithLineBreaks

					; Move cursor to line below
 000000ED  E8 00000201			call NewLine

					; Write blank lines to clear old text
 000000F2  E8 00000212			call ClearDisplayLine

					; Pop original cursor position to return to former position
 000000F7  66| 58			pop ax
 000000F9  FE C8			dec al
 000000FB  8A F0			mov dh, al
 000000FD  66| 58			pop ax
 000000FF  8A D0			mov dl, al
 00000101  E8 000001CD			call UpdateCursorPos

					; ------------------------

 00000106			KeyRead:

 00000106  E8 00000000 E	    call ReadKey         ; look for keyboard input
 0000010B  0F 84 FFFFFF5D	    jz   MainGameLoop      ; no key pressed yet
					
					; Check if backspace pressed
 00000111  66| 83 FA 08			cmp dx, VK_BACK
 00000115  75 44			jne checkCharEqual

					; Backspace pressed
 00000117  80 3D 00003AFD R		cmp cursorX, HORIZONTAL_OFFSET                 ; If on char 0, don't do anything
	   14
 0000011E  0F 84 FFFFFF4A		je MainGameLoop
					
					; Replacing the previous char
 00000124  FE 0D 00003AFD R		dec cursorX
 0000012A  FF 0D 00003B00 R		dec charIdx                    ; Move cursor to previous char
 00000130  8B 35 00003B00 R		mov esi, charIdx
 00000136  8A 35 00003AFE R		mov dh, cursorY
 0000013C  8A 15 00003AFD R		mov dl, cursorX
 00000142  E8 0000018C			call UpdateCursorPos

 00000147  B8 000000F0			mov eax, black + (white * 16)  ; Reverting color of char
 0000014C  E8 000001F8			call UpdateChar
 00000151  E8 00000000 E		call Gotoxy                    ; Move cursor back to previous char's space
 00000156  E9 FFFFFF13			jmp MainGameLoop                 ; Return to loop start

 0000015B			checkCharEqual:
 0000015B  FE 05 00003AFD R		inc cursorX

 00000161  8B 35 00003B00 R		mov esi, charIdx
					; Compare input with text
 00000167  3A 86 00000041 R		cmp    al, typingPrompt[esi]
 0000016D  75 0C			jne    charNotEqual

					; If character is equal
 0000016F  B8 0000002F			mov eax, white + (green * 16)
 00000174  E8 000001D0			call UpdateChar
 00000179  EB 0A			jmp lineEndCheck

 0000017B			charNotEqual:
 0000017B  B8 0000004F			mov eax, white + (red * 16)
 00000180  E8 000001C4			call UpdateChar

 00000185			lineEndCheck:
 00000185  80 3D 00003AFD R		cmp cursorX, LINE_LENGTH + HORIZONTAL_OFFSET
	   54
 0000018C  75 24			jne finishCheck

					; Clear completed lines
 0000018E  8A 35 00003AFE R		mov dh, cursorY
 00000194  B2 14			mov dl, HORIZONTAL_OFFSET
 00000196  E8 00000138			call UpdateCursorPos					; Move cursor position for display clearing
 0000019B  E8 00000169			call ClearDisplayLine
 000001A0  E8 0000014E			call NewLine
 000001A5  83 05 000013DA R		add typingPromptLeftBound, LINE_LENGTH	; Move left bound for typing prompt forward
	   40
 000001AC  FE 05 00003AFF R		inc distanceFromTop						; Inc distance from top to account for cleared line

 000001B2			finishCheck:
 000001B2  FF 05 00003B00 R		inc    charIdx
					; If not finished yet
 000001B8  80 BE 00000042 R		cmp    typingPrompt[esi + 1], 0
	   00
 000001BF  0F 85 FFFFFEA9		jne    MainGameLoop

					; Level complete message
 000001C5  E8 00000000 E		call Crlf
 000001CA  B8 0000002F			mov eax, white + (green * 16)
 000001CF  E8 00000000 E		call SetTextColor
 000001D4  E8 00000000 E		call Crlf
 000001D9  BA 00003AEE R		mov edx, OFFSET endingMsg
 000001DE  E8 00000000 E		call WriteString

 000001E3			quit:
 000001E3  B8 0000000F			mov eax, white + (black * 16)
 000001E8  E8 00000000 E		call SetTextColor
					mGotoxy 0, VERTICAL_OFFSET + STARTING_DISTANCE + 4
 000001ED  52		     1		push edx
 000001EE  B6 1E	     1		mov  dh,VERTICAL_OFFSET + STARTING_DISTANCE + 4
 000001F0  B2 00	     1		mov  dl,0
 000001F2  E8 00000000 E     1		call Gotoxy
 000001F7  5A		     1		pop  edx
					invoke ExitProcess,0
 000001F8  6A 00	   *	    push   +000000000h
 000001FA  E8 00000000 E   *	    call   ExitProcess
 000001FF			main endp


				;-------------------------------------------------------------------------------
				; openFile
				;
				; Opens the file whose name is stored in filename. Verifies file is opened and
				; that contents are within designated buffer size.
				; Receives: EDX = Offset of the filename to be opened.
				; Returns:  EAX = Bytes read (set to FILE_UNREAD if error occurs).
				;-------------------------------------------------------------------------------
 000001FF			openFile proc
 000001FF  E8 00000000 E		call OpenInputFile
 00000204  A3 000013D6 R		mov fileHandle, eax

 00000209  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 0000020C  75 13			jne file_ok
					mWrite <"Cannot open file", 0dh, 0ah>
 00003B0A		     1		.data		
 00003B0A 43 61 6E 6E 6F     1		??0000 BYTE "Cannot open file", 0dh, 0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 0000020E		     1		.code
 0000020E  52		     1		push	edx
 0000020F  BA 00003B0A R     1		mov	edx,OFFSET ??0000
 00000214  E8 00000000 E     1		call	WriteString
 00000219  5A		     1		pop	edx
 0000021A  B8 FFFFFFFF			mov eax, FILE_UNREAD
 0000021F  EB 46			jmp quit

 00000221			file_ok:
 00000221  BA 00000041 R		mov edx, OFFSET typingPrompt
 00000226  B9 00001388			mov ecx, BUFFER_SIZE
 0000022B  E8 00000000 E		call ReadFromFile
 00000230  A3 000013C9 R		mov typingPromptSize, eax
 00000235  73 18			jnc check_buffer_size
					mWrite "Error reading file. "
 00003B1D		     1		.data		
 00003B1D 45 72 72 6F 72     1		??0001 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 00000237		     1		.code
 00000237  52		     1		push	edx
 00000238  BA 00003B1D R     1		mov	edx,OFFSET ??0001
 0000023D  E8 00000000 E     1		call	WriteString
 00000242  5A		     1		pop	edx
 00000243  E8 00000000 E		call WriteWindowsMsg
 00000248  B8 FFFFFFFF			mov eax, FILE_UNREAD
 0000024D  EB 18			jmp quit
					
 0000024F			check_buffer_size:
 0000024F  3D 00001388			cmp eax, BUFFER_SIZE
 00000254  72 11			jb quit
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 00003B32		     1		.data		
 00003B32 45 72 72 6F 72     1		??0002 BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 00000256		     1		.code
 00000256  52		     1		push	edx
 00000257  BA 00003B32 R     1		mov	edx,OFFSET ??0002
 0000025C  E8 00000000 E     1		call	WriteString
 00000261  5A		     1		pop	edx
 00000262  B8 FFFFFFFF			mov eax, FILE_UNREAD

 00000267			quit:
 00000267  C3				ret
 00000268			openFile endp


 00000268			closeInputFile proc
 00000268  A1 000013D6 R		mov eax, fileHandle
 0000026D  E8 00000000 E		call CloseFile
 00000272  C3				ret
 00000273			closeInputFile endp


				;-------------------------------------------------------------------------------
				; WriteLine
				;
				; Writes a line of LINE_LENGTH length.
				; Receives: EBX = Starting index of text to be outputted
				;           EDX = Offset of the string to write.
				; Returns:  EBX = Index of text ended at
				;-------------------------------------------------------------------------------
 00000273			WriteLine proc uses ecx
 00000273  51		   *	    push   ecx
 00000274  B9 00000040			mov ecx, LINE_LENGTH
 00000279			lineWriter:
 00000279  8A 04 1A			mov al, [edx + ebx]
 0000027C  3C 00			cmp al, 0
 0000027E  74 08			je quit
 00000280  E8 00000000 E		call WriteChar
 00000285  43				inc ebx
 00000286  E2 F1			loop lineWriter

 00000288			quit:
					ret
 00000288  59		   *	    pop    ecx
 00000289  C3		   *	    ret    00000h
 0000028A			WriteLine endp



				; EBX = Index of character in array to write
 0000028A			WriteColorChar proc uses ecx
 0000028A  51		   *	    push   ecx
 0000028B  B9 000013DE R		mov ecx, OFFSET colors

 00000290  8B 04 59			mov eax, [ecx + (ebx * TYPE colors)]
 00000293  E8 00000000 E		call SetTextColor

 00000298  8A 04 1A			mov al, [edx + ebx]
 0000029B  E8 00000000 E		call WriteChar
					
					ret
 000002A0  59		   *	    pop    ecx
 000002A1  C3		   *	    ret    00000h
 000002A2			WriteColorChar endp


				; EDX = Offset of string
				; ECX = Amount of characters to print
				; EBX = The index to start from
 000002A2			PrintWithLineBreaks proc
 000002A2  BF 00000000		 	mov edi, 0				; Counter for if line length was reached
 000002A7  8A 04 1A			mov al, [edx + ebx]

 000002AA			printLoop:
					; If reached line length, start new line
 000002AA  83 FF 40			cmp edi, LINE_LENGTH
 000002AD  75 0A			jne writeChars
 000002AF  E8 0000003F			call NewLine
 000002B4  BF 00000000			mov edi, 0

 000002B9			writeChars:
 000002B9  E8 FFFFFFCC			call WriteColorChar

					; Break if end of string
 000002BE  43				inc ebx
 000002BF  47				inc edi
 000002C0  8A 04 1A			mov al, [edx + ebx]
 000002C3  3C 00			cmp al, 0
 000002C5  75 07			jne continuePrintLoop

 000002C7  E8 0000003D			call ClearDisplayLine
 000002CC  EB 04			jmp quit

 000002CE			continuePrintLoop:
 000002CE  3B D9			cmp ebx, ecx
 000002D0  75 D8			jne printLoop
					
 000002D2			quit:
 000002D2  C3				ret
 000002D3			PrintWithLineBreaks endp


 000002D3			UpdateCursorPos proc
 000002D3  88 15 00003AFD R		mov cursorX, dl
 000002D9  88 35 00003AFE R		mov cursorY, dh
					mGotoxy cursorX, cursorY
 000002DF  52		     1		push edx
 000002E0  8A 35 00003AFE R  1		mov  dh,cursorY
 000002E6  8A 15 00003AFD R  1		mov  dl,cursorX
 000002EC  E8 00000000 E     1		call Gotoxy
 000002F1  5A		     1		pop  edx
 000002F2  C3				ret
 000002F3			UpdateCursorPos endp


 000002F3			NewLine proc uses edx
 000002F3  52		   *	    push   edx
 000002F4  FE 05 00003AFE R		inc cursorY
 000002FA  8A 35 00003AFE R		mov dh, cursorY
 00000300  B2 14			mov dl, HORIZONTAL_OFFSET
 00000302  E8 FFFFFFCC			call UpdateCursorPos
					ret
 00000307  5A		   *	    pop    edx
 00000308  C3		   *	    ret    00000h
 00000309			NewLine endp


 00000309			ClearDisplayLine proc uses eax
 00000309  50		   *	    push   eax
 0000030A  B8 0000000F			mov eax, white+(black*16)
 0000030F  E8 00000000 E		call SetTextColor

 00000314			spaceWrite:
					mWriteSpace
 00003B59		     1	.data
 00003B59  00000001 [	     1	??0003 BYTE 1 DUP(' '),0
	    20
	   ] 00
 00000314		     1	.code
 00000314  52		     1		push	edx
 00000315  BA 00003B59 R     1		mov	edx,OFFSET ??0003
 0000031A  E8 00000000 E     1		call	WriteString
 0000031F  5A		     1		pop	edx
 00000320  FE 05 00003AFD R		inc cursorX
 00000326  80 3D 00003AFD R		cmp cursorX, HORIZONTAL_OFFSET + LINE_LENGTH
	   54
 0000032D  75 E5			jne spaceWrite
					
					ret
 0000032F  58		   *	    pop    eax
 00000330  C3		   *	    ret    00000h
 00000331			ClearDisplayLine endp

				; EAX = the color to save to colors array
				; EBX = the index in the colors array to start from
 00000331			SetColorArrayLine proc uses ecx
 00000331  51		   *	    push   ecx
 00000332  E8 00000000 E		call SetTextColor
 00000337  B9 00000040			mov ecx, LINE_LENGTH

 0000033C			colorSetter:
 0000033C  66| 89 04 5D			mov colors[ebx * TYPE colors], ax
	   000013DE R
 00000344  43				inc ebx
 00000345  E2 F5			loop colorSetter
					
					ret
 00000347  59		   *	    pop    ecx
 00000348  C3		   *	    ret    00000h
 00000349			SetColorArrayLine endp

				; EAX = the color to write in and save to colors array
 00000349			UpdateChar proc
 00000349  E8 00000000 E		call SetTextColor
 0000034E  66| 89 04 75			mov colors[esi * TYPE colors], ax	; Save color
	   000013DE R
 00000356  0F B6 86			movzx eax, typingPrompt[esi]
	   00000041 R
 0000035D  E8 00000000 E		call WriteChar
 00000362  C3				ret
 00000363			UpdateChar endp

				end main
Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/10/23 00:43:31
TypingTutor.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003B5B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000363 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearDisplayLine . . . . . . . .	P Near	 00000309 _TEXT	Length= 00000028 Public STDCALL
  spaceWrite . . . . . . . . . .	L Near	 00000314 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NewLine  . . . . . . . . . . . .	P Near	 000002F3 _TEXT	Length= 00000016 Public STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintWithLineBreaks  . . . . . .	P Near	 000002A2 _TEXT	Length= 00000031 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 000002AA _TEXT	
  writeChars . . . . . . . . . .	L Near	 000002B9 _TEXT	
  continuePrintLoop  . . . . . .	L Near	 000002CE _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000002D2 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColorArrayLine  . . . . . . .	P Near	 00000331 _TEXT	Length= 00000018 Public STDCALL
  colorSetter  . . . . . . . . .	L Near	 0000033C _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateChar . . . . . . . . . . .	P Near	 00000349 _TEXT	Length= 0000001A Public STDCALL
UpdateCursorPos  . . . . . . . .	P Near	 000002D3 _TEXT	Length= 00000020 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 0000028A _TEXT	Length= 00000018 Public STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteLine  . . . . . . . . . . .	P Near	 00000273 _TEXT	Length= 00000017 Public STDCALL
  lineWriter . . . . . . . . . .	L Near	 00000279 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000288 _TEXT	
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
closeInputFile . . . . . . . . .	P Near	 00000268 _TEXT	Length= 0000000B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001FF Public STDCALL
  MainGameLoop . . . . . . . . .	L Near	 0000006E _TEXT	
  KeyRead  . . . . . . . . . . .	L Near	 00000106 _TEXT	
  checkCharEqual . . . . . . . .	L Near	 0000015B _TEXT	
  charNotEqual . . . . . . . . .	L Near	 0000017B _TEXT	
  lineEndCheck . . . . . . . . .	L Near	 00000185 _TEXT	
  finishCheck  . . . . . . . . .	L Near	 000001B2 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000001E3 _TEXT	
openFile . . . . . . . . . . . .	P Near	 000001FF _TEXT	Length= 00000069 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 00000221 _TEXT	
  check_buffer_size  . . . . . .	L Near	 0000024F _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000267 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00003B0A _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00003B1D _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00003B32 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00003B59 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_UNREAD  . . . . . . . . . .	Number	 -00000001h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HORIZONTAL_OFFSET  . . . . . . .	Number	 00000014h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LENGTH  . . . . . . . . . .	Number	 00000040h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SECOND_IN_TICKS  . . . . . . . .	Number	 00000014h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STARTING_DISTANCE  . . . . . . .	Number	 00000018h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TICK . . . . . . . . . . . . . .	Number	 00000032h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VERTICAL_OFFSET  . . . . . . . .	Number	 00000002h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charIdx  . . . . . . . . . . . .	DWord	 00003B00 _DATA	
colors . . . . . . . . . . . . .	Word	 000013DE _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00003AFD _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00003AFE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
distanceFromTop  . . . . . . . .	Byte	 00003AFF _DATA	
divider  . . . . . . . . . . . .	Byte	 00000000 _DATA	
endingMsg  . . . . . . . . . . .	Byte	 00003AEE _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000013D6 _DATA	
filename . . . . . . . . . . . .	Byte	 000013CD _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linePrintCharIdx . . . . . . . .	DWord	 00003B05 _DATA	
linePrintTicksElapsed  . . . . .	Byte	 00003B04 _DATA	
lineProgressSpeed  . . . . . . .	Byte	 00003B09 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
typingPromptLeftBound  . . . . .	DWord	 000013DA _DATA	
typingPromptSize . . . . . . . .	DWord	 000013C9 _DATA	
typingPrompt . . . . . . . . . .	Byte	 00000041 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
