Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/11/23 12:20:37
TypingTutor.asm						     Page 1 - 1


				; TypingTutor.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
TypingTutor.asm(7) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 31			MenuTable BYTE '1'
 00000001  000000BA R			DWORD PLAY_GAME
 00000005 = 00000005		EntrySize = ($ - MenuTable)
 00000005  32				BYTE '2'
 00000006  000002B6 R			DWORD LEADERBOARD
 0000000A = 00000002		NumberOfEntries = ($ - MenuTable) / EntrySize

 00000000			.code
 00000000			main proc
 = 0000001E				MAIN_MENU_X_OFFSET = 30
 = 00000008				MAIN_MENU_Y_OFFSET = 8
 = 00000002				LINE_SPACING = 2

 00000000			MainMenu:
					; Clear screen to prevent weird screen color
 00000000  B8 0000000F			mov eax, white+(black*16)
 00000005  E8 00000000 E		call SetTextColor
 0000000A  E8 00000000 E		call Clrscr

					; Display title
 0000000F  B8 000000E0			mov eax, black + (yellow * 16)
 00000014  E8 00000000 E		call SetTextColor

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET
 00000019  52		     1		push edx
 0000001A  B6 08	     1		mov  dh,MAIN_MENU_Y_OFFSET
 0000001C  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 0000001E  E8 00000000 E     1		call Gotoxy
 00000023  5A		     1		pop  edx
					mWrite "    TYPING TUTOR    "
 0000000A		     1		.data		
 0000000A 20 20 20 20 54     1		??0000 BYTE "    TYPING TUTOR    ",0	
	   59 50 49 4E 47
	   20 54 55 54 4F
	   52 20 20 20 20
	   00
 00000024		     1		.code
 00000024  52		     1		push	edx
 00000025  BA 0000000A R     1		mov	edx,OFFSET ??0000
 0000002A  E8 00000000 E     1		call	WriteString
 0000002F  5A		     1		pop	edx

					; Display menu options
 00000030  B8 0000000E			mov eax, yellow+(black*16)
 00000035  E8 00000000 E		call SetTextColor

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET + LINE_SPACING
 0000003A  52		     1		push edx
 0000003B  B6 0A	     1		mov  dh,MAIN_MENU_Y_OFFSET + LINE_SPACING
 0000003D  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 0000003F  E8 00000000 E     1		call Gotoxy
 00000044  5A		     1		pop  edx
					mWrite "1. Play Game"
 0000001F		     1		.data		
 0000001F 31 2E 20 50 6C     1		??0001 BYTE "1. Play Game",0	
	   61 79 20 47 61
	   6D 65 00
 00000045		     1		.code
 00000045  52		     1		push	edx
 00000046  BA 0000001F R     1		mov	edx,OFFSET ??0001
 0000004B  E8 00000000 E     1		call	WriteString
 00000050  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET + LINE_SPACING * 2
 00000051  52		     1		push edx
 00000052  B6 0C	     1		mov  dh,MAIN_MENU_Y_OFFSET + LINE_SPACING * 2
 00000054  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 00000056  E8 00000000 E     1		call Gotoxy
 0000005B  5A		     1		pop  edx
					mWrite "2. View Leaderboard"
 0000002C		     1		.data		
 0000002C 32 2E 20 56 69     1		??0002 BYTE "2. View Leaderboard",0	
	   65 77 20 4C 65
	   61 64 65 72 62
	   6F 61 72 64 00
 0000005C		     1		.code
 0000005C  52		     1		push	edx
 0000005D  BA 0000002C R     1		mov	edx,OFFSET ??0002
 00000062  E8 00000000 E     1		call	WriteString
 00000067  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET + LINE_SPACING * 3
 00000068  52		     1		push edx
 00000069  B6 0E	     1		mov  dh,MAIN_MENU_Y_OFFSET + LINE_SPACING * 3
 0000006B  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 0000006D  E8 00000000 E     1		call Gotoxy
 00000072  5A		     1		pop  edx
					mWrite ">>> "
 00000040		     1		.data		
 00000040 3E 3E 3E 20 00     1		??0003 BYTE ">>> ",0	
 00000073		     1		.code
 00000073  52		     1		push	edx
 00000074  BA 00000040 R     1		mov	edx,OFFSET ??0003
 00000079  E8 00000000 E     1		call	WriteString
 0000007E  5A		     1		pop	edx

 0000007F  E8 00000000 E		call ReadChar
 00000084  BB 00000000 R		mov ebx, OFFSET MenuTable
 00000089  B9 00000002			mov ecx, NumberOfEntries

 0000008E			L1:
 0000008E  3A 03			cmp al, [ebx]				; Inputted char = lookup value?
 00000090  75 12			jne L2

 00000092  E8 00000000 E		call Clrscr					; Run menu procedure
 00000097  FF 53 01			call NEAR PTR [ebx + 1]
 0000009A  E8 00000000 E		call Crlf
 0000009F  E9 FFFFFF5C			jmp MainMenu

 000000A4			L2:
 000000A4  81 C3 00000005		add ebx, EntrySize			; Go to next entry
 000000AA  E2 E2			loop L1

					exit						; If no matching entries found, exit
 000000AC  6A 00	   *	    push   +000000000h
 000000AE  E8 00000000 E   *	    call   ExitProcess


					invoke ExitProcess,0
 000000B3  6A 00	   *	    push   +000000000h
 000000B5  E8 00000000 E   *	    call   ExitProcess
 000000BA			main endp


				;-------------------------------------------------------------------------------
				;                                 MAIN GAME
				;-------------------------------------------------------------------------------


				; Play area bounds
 = 00000002			PLAY_AREA_Y_OFFSET = 2
 = 0000000A			PLAY_AREA_X_OFFSET = 10
 = 00000040			LINE_LENGTH = 64
 = 00000018			STARTING_DISTANCE = 24
 = 00000050			INFO_COLUMN_X = PLAY_AREA_X_OFFSET + LINE_LENGTH + 6
 = 00000006			SCOREBOARD_Y = PLAY_AREA_Y_OFFSET + 4
 = 00000014			SCORE_LABEL_LENGTH = 20

				; File reading utilities
 = 00001388			BUFFER_SIZE = 5000
 =-00000001			FILE_UNREAD = -1

				; Game logic timing
 = 00000032			TICK = 50	; in milliseconds
 = 00000014			SECOND_IN_TICKS = 20
 = 0000003C			STARTING_PROGRESSION_SPEED = SECOND_IN_TICKS * 3


 00000045			.data
					; Graphics elements
 00000045  00000040 [			divider BYTE LINE_LENGTH DUP("-"), 0
	    2D
	   ] 00
 00000086 2D 2D 2D 20 4C		endingMsg BYTE "--- Level Complete ---", 0
	   65 76 65 6C 20
	   43 6F 6D 70 6C
	   65 74 65 20 2D
	   2D 2D 00

					; For file handling
 0000009D  00001388 [			typingPrompt BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 00001425 00000000			typingPromptSize DWORD 0
 00001429 54 65 78 74 2E		filename BYTE "Text.txt", 0
	   74 78 74 00
 00001432 00000000			fileHandle HANDLE ?

					; Typing prompt data
 00001436 00000000			typingPromptLeftBound DWORD 0
 0000143A 00000000			charIdx DWORD 0
 0000143E  00001387 [			textColors WORD LENGTHOF typingPrompt - 1 DUP(black+(white*16)), 0
	    00F0
	   ] 0000
 00003B4E 00000000			lineStatus DWORD 0, 0
	   00000000

					; Cursor position data
 00003B56 00				cursorX BYTE 0
 00003B57 00				cursorY BYTE 0
 00003B58 18				distanceFromTop BYTE STARTING_DISTANCE

					; Typing prompt display timing
 00003B59 00				linePrintTicksElapsed BYTE 0
 00003B5A 00000000			linePrintCharIdx DWORD 0
 00003B5E 3C				lineProgressSpeed BYTE STARTING_PROGRESSION_SPEED

					; Score counters
 00003B5F 00000000			charsTyped DWORD 0
 00003B63 00000000			backspacesPressed DWORD 0


 000000BA			.code
 000000BA			PLAY_GAME proc
 000000BA  E8 000004A3			call ResetGame

					; Read file to memory
 000000BF  BA 00001429 R		mov edx, OFFSET filename
 000000C4  E8 000001FF			call openFile
 000000C9  83 F8 FF			cmp eax, FILE_UNREAD
 000000CC  0F 84 000001CE		je quit
 000000D2  E8 0000025A			call closeInputFile
					
					; Game title
 000000D7  B8 000000E0			mov eax, black + (yellow * 16)
 000000DC  E8 00000000 E		call SetTextColor
					mGotoxy INFO_COLUMN_X, PLAY_AREA_Y_OFFSET + 2
 000000E1  52		     1		push edx
 000000E2  B6 04	     1		mov  dh,PLAY_AREA_Y_OFFSET + 2
 000000E4  B2 50	     1		mov  dl,INFO_COLUMN_X
 000000E6  E8 00000000 E     1		call Gotoxy
 000000EB  5A		     1		pop  edx
					mWrite "    TYPING TUTOR    "
 00003B67		     1		.data		
 00003B67 20 20 20 20 54     1		??0004 BYTE "    TYPING TUTOR    ",0	
	   59 50 49 4E 47
	   20 54 55 54 4F
	   52 20 20 20 20
	   00
 000000EC		     1		.code
 000000EC  52		     1		push	edx
 000000ED  BA 00003B67 R     1		mov	edx,OFFSET ??0004
 000000F2  E8 00000000 E     1		call	WriteString
 000000F7  5A		     1		pop	edx

					; Add top divider
 000000F8  B8 0000000E			mov eax, yellow + (black * 16)
 000000FD  E8 00000000 E		call SetTextColor
					mGotoxy PLAY_AREA_X_OFFSET, PLAY_AREA_Y_OFFSET - 1
 00000102  52		     1		push edx
 00000103  B6 01	     1		mov  dh,PLAY_AREA_Y_OFFSET - 1
 00000105  B2 0A	     1		mov  dl,PLAY_AREA_X_OFFSET
 00000107  E8 00000000 E     1		call Gotoxy
 0000010C  5A		     1		pop  edx
					mWriteString OFFSET divider
 0000010D  52		     1		push edx
 0000010E  BA 00000045 R     1		mov  edx,OFFSET OFFSET divider
 00000113  E8 00000000 E     1		call WriteString
 00000118  5A		     1		pop  edx

					; Add bottom divider
					mGotoxy PLAY_AREA_X_OFFSET, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 00000119  52		     1		push edx
 0000011A  B6 1A	     1		mov  dh,PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 0000011C  B2 0A	     1		mov  dl,PLAY_AREA_X_OFFSET
 0000011E  E8 00000000 E     1		call Gotoxy
 00000123  5A		     1		pop  edx
					mWriteString OFFSET divider
 00000124  52		     1		push edx
 00000125  BA 00000045 R     1		mov  edx,OFFSET OFFSET divider
 0000012A  E8 00000000 E     1		call WriteString
 0000012F  5A		     1		pop  edx

					; Scoreboard labels
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y
 00000130  52		     1		push edx
 00000131  B6 06	     1		mov  dh,SCOREBOARD_Y
 00000133  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000135  E8 00000000 E     1		call Gotoxy
 0000013A  5A		     1		pop  edx
					mWrite "Characters Typed  : "
 00003B7C		     1		.data		
 00003B7C 43 68 61 72 61     1		??0005 BYTE "Characters Typed  : ",0	
	   63 74 65 72 73
	   20 54 79 70 65
	   64 20 20 3A 20
	   00
 0000013B		     1		.code
 0000013B  52		     1		push	edx
 0000013C  BA 00003B7C R     1		mov	edx,OFFSET ??0005
 00000141  E8 00000000 E     1		call	WriteString
 00000146  5A		     1		pop	edx
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING
 00000147  52		     1		push edx
 00000148  B6 08	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING
 0000014A  B2 50	     1		mov  dl,INFO_COLUMN_X
 0000014C  E8 00000000 E     1		call Gotoxy
 00000151  5A		     1		pop  edx
					mWrite "Backspaces Pressed: "
 00003B91		     1		.data		
 00003B91 42 61 63 6B 73     1		??0006 BYTE "Backspaces Pressed: ",0	
	   70 61 63 65 73
	   20 50 72 65 73
	   73 65 64 3A 20
	   00
 00000152		     1		.code
 00000152  52		     1		push	edx
 00000153  BA 00003B91 R     1		mov	edx,OFFSET ??0006
 00000158  E8 00000000 E     1		call	WriteString
 0000015D  5A		     1		pop	edx

					; How to exit prompt
					mGotoxy INFO_COLUMN_X, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 0000015E  52		     1		push edx
 0000015F  B6 1A	     1		mov  dh,PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 00000161  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000163  E8 00000000 E     1		call Gotoxy
 00000168  5A		     1		pop  edx
					mWrite "Press ESC to Quit"
 00003BA6		     1		.data		
 00003BA6 50 72 65 73 73     1		??0007 BYTE "Press ESC to Quit",0	
	   20 45 53 43 20
	   74 6F 20 51 75
	   69 74 00
 00000169		     1		.code
 00000169  52		     1		push	edx
 0000016A  BA 00003BA6 R     1		mov	edx,OFFSET ??0007
 0000016F  E8 00000000 E     1		call	WriteString
 00000174  5A		     1		pop	edx

					; Set to standard color
 00000175  B8 000000F0			mov eax, black + (white * 16)
 0000017A  E8 00000000 E		call SetTextColor

					; Initial cursor positioning
 0000017F  B6 02			mov dh, PLAY_AREA_Y_OFFSET
 00000181  02 35 00003B58 R		add dh, distanceFromTop
 00000187  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 00000189  E8 0000028D			call UpdateCursorPos


 0000018E			MainGameLoop:
 0000018E  B8 00000032		    mov  eax, TICK    
 00000193  E8 00000000 E	    call Delay           ; Delay to ensure proper key read

 00000198  E8 0000030F			call UpdateScoreboard

					; If time to print another line of text prompt, do so
 0000019D  FE 05 00003B59 R		inc linePrintTicksElapsed
 000001A3  A0 00003B5E R		mov al, lineProgressSpeed
 000001A8  38 05 00003B59 R		cmp linePrintTicksElapsed, al
 000001AE  75 26			jne KeyRead						; Else, read key

					; If reached top of play area, game over
 000001B0  FE 0D 00003B58 R		dec distanceFromTop
 000001B6  80 3D 00003B58 R		cmp distanceFromTop, -1			
	   FF
 000001BD  0F 84 000000DD		je quit

 000001C3  E8 00000176			call NewPromptLine				; Print a new line of prompt
 000001C8  80 2D 00003B5E R		sub lineProgressSpeed, 1		; Increase the speed of progression
	   01
 000001CF  C6 05 00003B59 R		mov linePrintTicksElapsed, 0	; Reset tick counter for display
	   00

 000001D6			KeyRead:
 000001D6  E8 00000000 E	    call ReadKey			; look for keyboard input
 000001DB  74 B1		    jz   MainGameLoop		; no key pressed yet

					; If at bottom of play area, don't do anything
 000001DD  80 3D 00003B57 R		cmp cursorY, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
	   1A
 000001E4  74 A8			je MainGameLoop

					; Check if escape pressed
 000001E6  66| 83 FA 1B			cmp dx, VK_ESCAPE
 000001EA  75 01			jne CheckBackspace
 000001EC  C3				ret

 000001ED			CheckBackspace:
					; Check if backspace pressed
 000001ED  66| 83 FA 08			cmp dx, VK_BACK
 000001F1  75 1B			jne checkCharEqual				; If not backspace, process inputted character

					; Backspace was pressed
 000001F3  80 3D 00003B56 R		cmp cursorX, PLAY_AREA_X_OFFSET	; If on char 0, don't do anything
	   0A
 000001FA  74 92			je MainGameLoop

 000001FC  FF 05 00003B63 R		inc backspacesPressed
 00000202  E8 00000272			call ReplacePreviousChar
 00000207  E8 00000409			call RevertLineStatus
 0000020C  EB 80			jmp MainGameLoop

 0000020E			checkCharEqual:
 0000020E  FF 05 00003B5F R		inc charsTyped

					; Compare input with text
 00000214  8B 3D 0000143A R		mov edi, charIdx
 0000021A  3A 87 0000009D R		cmp    al, typingPrompt[edi]
 00000220  75 11			jne    CharNotEqual

					; If character is equal
 00000222  B8 0000002F			mov eax, white + (green * 16)
 00000227  E8 000001CF			call WriteToColorArr
 0000022C  E8 000003B1			call CorrectInput
 00000231  EB 0F			jmp LineEndCheck

 00000233			CharNotEqual:
 00000233  B8 0000004F			mov eax, white + (red * 16)
 00000238  E8 000001BE			call WriteToColorArr
 0000023D  E8 000003BD			call WrongInput

 00000242			LineEndCheck:
 00000242  80 3D 00003B56 R		cmp cursorX, LINE_LENGTH + PLAY_AREA_X_OFFSET
	   4A
 00000249  75 24			jne finishCheck

					; Clear completed lines
					;call ClearLineStatus
 0000024B  8A 35 00003B57 R		mov dh, cursorY
 00000251  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 00000253  E8 000001C3			call UpdateCursorPos					; Move cursor position for display clearing
 00000258  E8 000001F4			call ClearDisplayLine
 0000025D  E8 000001D9			call NewLine
 00000262  83 05 00001436 R		add typingPromptLeftBound, LINE_LENGTH	; Move left bound for typing prompt forward
	   40
 00000269  FE 05 00003B58 R		inc distanceFromTop						; Inc distance from top to account for cleared line

 0000026F			finishCheck:
 0000026F  FF 05 0000143A R		inc    charIdx
					; If not finished yet
 00000275  80 BF 0000009E R		cmp    typingPrompt[edi + 1], 0
	   00

 0000027C  0F 85 FFFFFF0C		jne    MainGameLoop

					; Level complete message
 00000282  E8 00000000 E		call Crlf
 00000287  B8 0000002F			mov eax, white + (green * 16)
 0000028C  E8 00000000 E		call SetTextColor
 00000291  E8 00000000 E		call Crlf
 00000296  BA 00000086 R		mov edx, OFFSET endingMsg
 0000029B  E8 00000000 E		call WriteString

 000002A0			quit:
 000002A0  B8 0000000F			mov eax, white + (black * 16)
 000002A5  E8 00000000 E		call SetTextColor
					mGotoxy 0, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE + 4
 000002AA  52		     1		push edx
 000002AB  B6 1E	     1		mov  dh,PLAY_AREA_Y_OFFSET + STARTING_DISTANCE + 4
 000002AD  B2 00	     1		mov  dl,0
 000002AF  E8 00000000 E     1		call Gotoxy
 000002B4  5A		     1		pop  edx
 000002B5  C3				ret
 000002B6			PLAY_GAME endp


				;-------------------------------------------------------------------------------
				;                                LEADERBOARD
				;-------------------------------------------------------------------------------


 000002B6			.code
 000002B6			LEADERBOARD proc
					mWrite "Not implemented"
 00003BB8		     1		.data		
 00003BB8 4E 6F 74 20 69     1		??0008 BYTE "Not implemented",0	
	   6D 70 6C 65 6D
	   65 6E 74 65 64
	   00
 000002B6		     1		.code
 000002B6  52		     1		push	edx
 000002B7  BA 00003BB8 R     1		mov	edx,OFFSET ??0008
 000002BC  E8 00000000 E     1		call	WriteString
 000002C1  5A		     1		pop	edx
 000002C2  E8 00000000 E		call ReadChar
 000002C7  C3				ret
 000002C8			LEADERBOARD endp



				;-------------------------------------------------------------------------------
				;                                PROCEDURES
				;-------------------------------------------------------------------------------


				;-------------------------------------------------------------------------------
				; openFile
				;
				; Opens the file whose name is stored in filename. Verifies file is opened and
				; that contents are within designated buffer size.
				; Receives: EDX = Offset of the filename to be opened.
				; Returns:  EAX = Bytes read (set to FILE_UNREAD if error occurs).
				;-------------------------------------------------------------------------------
 000002C8			openFile proc
 000002C8  E8 00000000 E		call OpenInputFile
 000002CD  A3 00001432 R		mov fileHandle, eax

 000002D2  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 000002D5  75 13			jne file_ok
					mWrite <"Cannot open file", 0dh, 0ah>
 00003BC8		     1		.data		
 00003BC8 43 61 6E 6E 6F     1		??0009 BYTE "Cannot open file", 0dh, 0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 000002D7		     1		.code
 000002D7  52		     1		push	edx
 000002D8  BA 00003BC8 R     1		mov	edx,OFFSET ??0009
 000002DD  E8 00000000 E     1		call	WriteString
 000002E2  5A		     1		pop	edx
 000002E3  B8 FFFFFFFF			mov eax, FILE_UNREAD
 000002E8  EB 46			jmp quit

 000002EA			file_ok:
 000002EA  BA 0000009D R		mov edx, OFFSET typingPrompt
 000002EF  B9 00001388			mov ecx, BUFFER_SIZE
 000002F4  E8 00000000 E		call ReadFromFile
 000002F9  A3 00001425 R		mov typingPromptSize, eax
 000002FE  73 18			jnc check_buffer_size
					mWrite "Error reading file. "
 00003BDB		     1		.data		
 00003BDB 45 72 72 6F 72     1		??000A BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 00000300		     1		.code
 00000300  52		     1		push	edx
 00000301  BA 00003BDB R     1		mov	edx,OFFSET ??000A
 00000306  E8 00000000 E     1		call	WriteString
 0000030B  5A		     1		pop	edx
 0000030C  E8 00000000 E		call WriteWindowsMsg
 00000311  B8 FFFFFFFF			mov eax, FILE_UNREAD
 00000316  EB 18			jmp quit
					
 00000318			check_buffer_size:
 00000318  3D 00001388			cmp eax, BUFFER_SIZE
 0000031D  72 11			jb quit
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 00003BF0		     1		.data		
 00003BF0 45 72 72 6F 72     1		??000B BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 0000031F		     1		.code
 0000031F  52		     1		push	edx
 00000320  BA 00003BF0 R     1		mov	edx,OFFSET ??000B
 00000325  E8 00000000 E     1		call	WriteString
 0000032A  5A		     1		pop	edx
 0000032B  B8 FFFFFFFF			mov eax, FILE_UNREAD

 00000330			quit:
 00000330  C3				ret
 00000331			openFile endp


				;-------------------------------------------------------------------------------
				; CloseInputFile
				;
				; Closes the file currently in fileHandle.
				;-------------------------------------------------------------------------------
 00000331			CloseInputFile proc USES eax
 00000331  50		   *	    push   eax
 00000332  A1 00001432 R		mov eax, fileHandle
 00000337  E8 00000000 E		call CloseFile
					ret
 0000033C  58		   *	    pop    eax
 0000033D  C3		   *	    ret    00000h
 0000033E			CloseInputFile endp


				;-------------------------------------------------------------------------------
				; NewPromptLine
				;
				; Writes a new line in the typing prompt.
				;-------------------------------------------------------------------------------
 0000033E			NewPromptLine proc USES eax ebx ecx edx
					; Push cursor position to stack
 0000033E  50		   *	    push   eax
 0000033F  53		   *	    push   ebx
 00000340  51		   *	    push   ecx
 00000341  52		   *	    push   edx
 00000342  66| 0F B6 05			movzx ax, cursorX
	   00003B56 R
 0000034A  66| 50			push ax
 0000034C  66| 0F B6 05			movzx ax, cursorY
	   00003B57 R
 00000354  66| 50			push ax

					; Set cursor position to rewrite block of text
 00000356  8A 35 00003B58 R		mov dh, distanceFromTop
 0000035C  80 C6 02			add dh, PLAY_AREA_Y_OFFSET
 0000035F  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 00000361  E8 000000B5			call UpdateCursorPos

					; Write text block
 00000366  83 05 00003B5A R		add linePrintCharIdx, LINE_LENGTH
	   40
 0000036D  BA 0000009D R		mov edx, OFFSET typingPrompt
 00000372  8B 0D 00003B5A R		mov ecx, linePrintCharIdx
 00000378  8B 1D 00001436 R		mov ebx, typingPromptLeftBound
 0000037E  E8 00000027			call ReprintPrompt
					
 00000383  E8 000000B3			call NewLine	; Move cursor to line below written prompt

					; If cursor is not at bottom of play area, clear the display line below prompt
 00000388  80 3D 00003B57 R		cmp cursorY, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
	   1A
 0000038F  74 05			je ReturnToOriginalPos
 00000391  E8 000000BB			call ClearDisplayLine
					
 00000396			ReturnToOriginalPos:
					; Pop original cursor position to return to former position
 00000396  66| 58			pop ax
 00000398  FE C8			dec al			; Cursor y has to decrement to account for prompt having moved
 0000039A  8A F0			mov dh, al
 0000039C  66| 58			pop ax
 0000039E  8A D0			mov dl, al
 000003A0  E8 00000076			call UpdateCursorPos
					ret
 000003A5  5A		   *	    pop    edx
 000003A6  59		   *	    pop    ecx
 000003A7  5B		   *	    pop    ebx
 000003A8  58		   *	    pop    eax
 000003A9  C3		   *	    ret    00000h
 000003AA			NewPromptLine endp


				;-------------------------------------------------------------------------------
				; ReprintPrompt
				;
				; Reprints typing prompt using colors from text colors from colors array
				; Receives: EDX = OFFSET of typing prompt
				;			EBX = The index of typing prompt to start printing from
				;			ECX = The index of typing prompt to stop printing at
				;-------------------------------------------------------------------------------
 000003AA			ReprintPrompt proc USES edi
 000003AA  57		   *	    push   edi
 000003AB  BF 00000000		 	mov edi, 0				; Counter for if line length was reached
 000003B0  8A 04 1A			mov al, [edx + ebx]

 000003B3			printLoop:
					; If reached line length, start new line
 000003B3  83 FF 40			cmp edi, LINE_LENGTH
 000003B6  75 0A			jne writeChars
 000003B8  E8 0000007E			call NewLine
 000003BD  BF 00000000			mov edi, 0

 000003C2			writeChars:
 000003C2  E8 00000016			call WriteFromColorArr

					; Break if end of string
 000003C7  43				inc ebx
 000003C8  47				inc edi
 000003C9  8A 04 1A			mov al, [edx + ebx]
 000003CC  3C 00			cmp al, 0
 000003CE  75 07			jne continuePrintLoop

 000003D0  E8 0000007C			call ClearDisplayLine	; Clear the rest of the display line
 000003D5  EB 04			jmp quit

 000003D7			continuePrintLoop:
 000003D7  3B D9			cmp ebx, ecx
 000003D9  75 D8			jne printLoop
					
 000003DB			quit:
					ret
 000003DB  5F		   *	    pop    edi
 000003DC  C3		   *	    ret    00000h
 000003DD			ReprintPrompt endp


				;-------------------------------------------------------------------------------
				; WriteFromColorArr
				;
				; Writes a colored character to display using colors from text colors array.
				; Receives: EBX = Index of character in array to write
				;-------------------------------------------------------------------------------
 000003DD			WriteFromColorArr proc USES ecx
 000003DD  51		   *	    push   ecx
 000003DE  FE 05 00003B56 R		inc cursorX
 000003E4  B9 0000143E R		mov ecx, OFFSET textColors	; Get a reference to text colors array

 000003E9  8B 04 59			mov eax, [ecx + (ebx * TYPE textColors)]	; Select color from array
 000003EC  E8 00000000 E		call SetTextColor

 000003F1  8A 04 1A			mov al, [edx + ebx]			; Write character in selected color
 000003F4  E8 00000000 E		call WriteChar
					
					ret
 000003F9  59		   *	    pop    ecx
 000003FA  C3		   *	    ret    00000h
 000003FB			WriteFromColorArr endp


				;-------------------------------------------------------------------------------
				; WriteToColorArr
				;
				; Writes a charater in a given color and saves that color to textColors array.
				; Receives: EAX = the color to write in and save to textColors array
				;			EDI = the index of color array to write to.
				;-------------------------------------------------------------------------------
 000003FB			WriteToColorArr proc
 000003FB  E8 00000000 E		call SetTextColor
 00000400  66| 89 04 7D			mov textColors[edi * TYPE textColors], ax	; Save color
	   0000143E R
 00000408  0F B6 87			movzx eax, typingPrompt[edi]
	   0000009D R
 0000040F  E8 00000000 E		call WriteChar
 00000414  FE 05 00003B56 R		inc cursorX
 0000041A  C3				ret
 0000041B			WriteToColorArr endp


				;-------------------------------------------------------------------------------
				; UpdateCursorPos
				;
				; Moves cursor to an (x,y) coordinate on screen and updates cursor location
				; varaibles accordingly.
				; Receives: DL = the x position to set cursor to
				;			DH = the y position to set cursor to
				;-------------------------------------------------------------------------------
 0000041B			UpdateCursorPos proc
 0000041B  88 15 00003B56 R		mov cursorX, dl
 00000421  88 35 00003B57 R		mov cursorY, dh
					mGotoxy cursorX, cursorY
 00000427  52		     1		push edx
 00000428  8A 35 00003B57 R  1		mov  dh,cursorY
 0000042E  8A 15 00003B56 R  1		mov  dl,cursorX
 00000434  E8 00000000 E     1		call Gotoxy
 00000439  5A		     1		pop  edx
 0000043A  C3				ret
 0000043B			UpdateCursorPos endp


				;-------------------------------------------------------------------------------
				; NewLine
				;
				; Moves cursor to the next line in play area.
				;-------------------------------------------------------------------------------
 0000043B			NewLine proc USES edx
 0000043B  52		   *	    push   edx
 0000043C  FE 05 00003B57 R		inc cursorY
 00000442  8A 35 00003B57 R		mov dh, cursorY
 00000448  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 0000044A  E8 FFFFFFCC			call UpdateCursorPos
					ret
 0000044F  5A		   *	    pop    edx
 00000450  C3		   *	    ret    00000h
 00000451			NewLine endp


				;-------------------------------------------------------------------------------
				; ClearDisplayLine
				;
				; Clears a line of the play area starting from cursor's x coordinate.
				;-------------------------------------------------------------------------------
 00000451			ClearDisplayLine proc USES eax
 00000451  50		   *	    push   eax
 00000452  B8 0000000F			mov eax, white+(black*16)
 00000457  E8 00000000 E		call SetTextColor

 0000045C			spaceWrite:
					mWriteSpace
 00003C17		     1	.data
 00003C17  00000001 [	     1	??000C BYTE 1 DUP(' '),0
	    20
	   ] 00
 0000045C		     1	.code
 0000045C  52		     1		push	edx
 0000045D  BA 00003C17 R     1		mov	edx,OFFSET ??000C
 00000462  E8 00000000 E     1		call	WriteString
 00000467  5A		     1		pop	edx
 00000468  FE 05 00003B56 R		inc cursorX
 0000046E  80 3D 00003B56 R		cmp cursorX, PLAY_AREA_X_OFFSET + LINE_LENGTH
	   4A
 00000475  75 E5			jne spaceWrite
					
					ret
 00000477  58		   *	    pop    eax
 00000478  C3		   *	    ret    00000h
 00000479			ClearDisplayLine endp


				;-------------------------------------------------------------------------------
				; ReplacePreviousChar
				;
				; Reverts color of previous character in play area and updates text color array
				; accordingly.
				;-------------------------------------------------------------------------------
 00000479			ReplacePreviousChar proc
 00000479  FE 0D 00003B56 R		dec cursorX
 0000047F  8A 35 00003B57 R		mov dh, cursorY
 00000485  8A 15 00003B56 R		mov dl, cursorX
 0000048B  E8 FFFFFF8B			call UpdateCursorPos           ; Move cursor to previous char

 00000490  B8 000000F0			mov eax, black + (white * 16)  ; Reverting color of char (this moves cursor forward)
 00000495  FF 0D 0000143A R		dec charIdx         
 0000049B  8B 3D 0000143A R		mov edi, charIdx
 000004A1  E8 FFFFFF55			call WriteToColorArr

 000004A6  E8 FFFFFF70			call UpdateCursorPos           ; Move cursor back to previous char's space

 000004AB  C3				ret
 000004AC			ReplacePreviousChar endp



 000004AC			UpdateScoreboard proc USES eax edx
					; Push cursor position to stack
 000004AC  50		   *	    push   eax
 000004AD  52		   *	    push   edx
 000004AE  66| 0F B6 05			movzx ax, cursorX
	   00003B56 R
 000004B6  66| 50			push ax
 000004B8  66| 0F B6 05			movzx ax, cursorY
	   00003B57 R
 000004C0  66| 50			push ax

 000004C2  B8 0000000E			mov eax, yellow+(black*16)
 000004C7  E8 00000000 E		call SetTextColor

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y
 000004CC  52		     1		push edx
 000004CD  B6 06	     1		mov  dh,SCOREBOARD_Y
 000004CF  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 000004D1  E8 00000000 E     1		call Gotoxy
 000004D6  5A		     1		pop  edx
 000004D7  A1 00003B5F R		mov eax, charsTyped
 000004DC  E8 00000000 E		call WriteDec

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y + LINE_SPACING
 000004E1  52		     1		push edx
 000004E2  B6 08	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING
 000004E4  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 000004E6  E8 00000000 E     1		call Gotoxy
 000004EB  5A		     1		pop  edx
 000004EC  A1 00003B63 R		mov eax, backspacesPressed
 000004F1  E8 00000000 E		call WriteDec

					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING * 2
 000004F6  52		     1		push edx
 000004F7  B6 0A	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 2
 000004F9  B2 50	     1		mov  dl,INFO_COLUMN_X
 000004FB  E8 00000000 E     1		call Gotoxy
 00000500  5A		     1		pop  edx
 00000501  A1 00003B4E R		mov eax, lineStatus
 00000506  E8 00000000 E		call WriteBin

					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING * 3
 0000050B  52		     1		push edx
 0000050C  B6 0C	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 3
 0000050E  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000510  E8 00000000 E     1		call Gotoxy
 00000515  5A		     1		pop  edx
 00000516  A1 00003B52 R		mov eax, lineStatus[TYPE lineStatus]
 0000051B  E8 00000000 E		call WriteBin

					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING * 4
 00000520  52		     1		push edx
 00000521  B6 0E	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 4
 00000523  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000525  E8 00000000 E     1		call Gotoxy
 0000052A  5A		     1		pop  edx
 0000052B  8B 1D 00001436 R		mov ebx, typingPromptLeftBound
 00000531  E8 00000115			call CheckLineStatus
 00000536  73 0E			jnc NotComplete
					mWrite "Line complete"
 00003C19		     1		.data		
 00003C19 4C 69 6E 65 20     1		??000D BYTE "Line complete",0	
	   63 6F 6D 70 6C
	   65 74 65 00
 00000538		     1		.code
 00000538  52		     1		push	edx
 00000539  BA 00003C19 R     1		mov	edx,OFFSET ??000D
 0000053E  E8 00000000 E     1		call	WriteString
 00000543  5A		     1		pop	edx
 00000544  EB 0C			jmp Complete

 00000546			NotComplete:
					mWrite "Line not complete"
 00003C27		     1		.data		
 00003C27 4C 69 6E 65 20     1		??000E BYTE "Line not complete",0	
	   6E 6F 74 20 63
	   6F 6D 70 6C 65
	   74 65 00
 00000546		     1		.code
 00000546  52		     1		push	edx
 00000547  BA 00003C27 R     1		mov	edx,OFFSET ??000E
 0000054C  E8 00000000 E     1		call	WriteString
 00000551  5A		     1		pop	edx
 00000552			Complete:

					; Pop original cursor position to return to former position
 00000552  66| 58			pop ax
 00000554  8A F0			mov dh, al
 00000556  66| 58			pop ax
 00000558  8A D0			mov dl, al
 0000055A  E8 FFFFFEBC			call UpdateCursorPos

					ret
 0000055F  5A		   *	    pop    edx
 00000560  58		   *	    pop    eax
 00000561  C3		   *	    ret    00000h
 00000562			UpdateScoreboard endp


 00000562			ResetGame proc
					; Reset scores
 00000562  C7 05 00003B5F R		mov charsTyped, 0
	   00000000
 0000056C  C7 05 00003B63 R		mov backspacesPressed, 0
	   00000000

					; Reset starting distance
 00000576  C6 05 00003B58 R		mov distanceFromTop, STARTING_DISTANCE
	   18

					; Reset typing prompt data
 0000057D  C7 05 00001436 R		mov typingPromptLeftBound, 0
	   00000000
 00000587  C7 05 0000143A R		mov charIdx, 0
	   00000000


					; Reset timing
 00000591  C6 05 00003B59 R		mov linePrintTicksElapsed, 0
	   00
 00000598  C7 05 00003B5A R		mov linePrintCharIdx, 0
	   00000000
 000005A2  C6 05 00003B5E R		mov lineProgressSpeed, STARTING_PROGRESSION_SPEED
	   3C

 000005A9  B9 00001387			mov ecx, LENGTHOF textColors - 1
 000005AE			ResetColors:
 000005AE  66| C7 04 4D			mov textColors[ecx * TYPE textColors], black+(white*16)
	   0000143E R
	   00F0
 000005B8  E2 F4			loop ResetColors
 000005BA  66| C7 04 4D			mov textColors[ecx * TYPE textColors], black+(white*16)
	   0000143E R
	   00F0

 000005C4  B9 00000001			mov ecx, LENGTHOF lineStatus - 1
 000005C9			ResetLineStatus:
 000005C9  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B4E R
	   00000000
 000005D4  E2 D8			loop ResetColors
 000005D6  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B4E R
	   00000000

 000005E1  C3				ret
 000005E2			ResetGame endp


				;-------------------------------------------------------------------------------
				; CorrectInput
				;
				; Updates line status bit string to reflect correct input.
				;-------------------------------------------------------------------------------
 000005E2			CorrectInput proc USES eax
 000005E2  50		   *	    push   eax
 000005E3  A1 00003B4E R		mov eax, lineStatus[0]
 000005E8  0F AC 05			shrd lineStatus[TYPE lineStatus], eax, 1
	   00003B52 R 01
 000005F0  B8 00000001			mov eax, 1
 000005F5  0F AC 05			shrd lineStatus[0], eax, 1
	   00003B4E R 01
					ret
 000005FD  58		   *	    pop    eax
 000005FE  C3		   *	    ret    00000h
 000005FF			CorrectInput endp


				;-------------------------------------------------------------------------------
				; WrongInput
				;
				; Updates line status bit string to reflect incorrect input.
				;-------------------------------------------------------------------------------
 000005FF			WrongInput proc USES eax
 000005FF  50		   *	    push   eax
 00000600  A1 00003B4E R		mov eax, lineStatus[0]
 00000605  0F AC 05			shrd lineStatus[TYPE lineStatus], eax, 1
	   00003B52 R 01
 0000060D  D1 2D 00003B4E R		shr lineStatus[0], 1
					ret
 00000613  58		   *	    pop    eax
 00000614  C3		   *	    ret    00000h
 00000615			WrongInput endp


				;-------------------------------------------------------------------------------
				; RevertLineStatus
				;
				; Reverts last change to line status bit string.
				;-------------------------------------------------------------------------------
 00000615			RevertLineStatus proc USES eax
 00000615  50		   *	    push   eax
 00000616  A1 00003B52 R		mov eax, lineStatus[TYPE lineStatus]
 0000061B  0F A4 05			shld lineStatus[0], eax, 1
	   00003B4E R 01
 00000623  D1 25 00003B52 R		shl lineStatus[TYPE lineStatus], 1
					ret
 00000629  58		   *	    pop    eax
 0000062A  C3		   *	    ret    00000h
 0000062B			RevertLineStatus endp


				;-------------------------------------------------------------------------------
				; ClearLineStatus
				;
				; Sets line status bit string to zeros.
				;-------------------------------------------------------------------------------
 0000062B			ClearLineStatus proc USES eax
 0000062B  50		   *	    push   eax
 0000062C  B9 00000001			mov ecx, LENGTHOF lineStatus - 1
 00000631			StatusClearing:
 00000631  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B4E R
	   00000000
 0000063C  E2 F3			loop StatusClearing
 0000063E  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B4E R
	   00000000

					ret
 00000649  58		   *	    pop    eax
 0000064A  C3		   *	    ret    00000h
 0000064B			ClearLineStatus endp


				;-------------------------------------------------------------------------------
				; CheckLineStatus
				;
				; Reverts last change to line status bit string.
				; Recieves: EBX = left bound of typing prompt
				; Returns : CY = 0 if line not completely correct
				;			CY = 1 if line is completely correct
				;-------------------------------------------------------------------------------
 0000064B			CheckLineStatus proc USES eax ebx ecx edx
 0000064B  50		   *	    push   eax
 0000064C  53		   *	    push   ebx
 0000064D  51		   *	    push   ecx
 0000064E  52		   *	    push   edx
 0000064F  8B 0D 00001425 R		mov ecx, typingPromptSize
 00000655  2B CB			sub ecx, ebx
 00000657  BA 00000000			mov edx, 0		; Counter for how many times rotated

 0000065C  83 F9 40			cmp ecx, LINE_LENGTH
 0000065F  76 05			jbe IncompleteLine
 00000661  B9 00000040			mov ecx, LINE_LENGTH

 00000666			IncompleteLine:
 00000666  49				dec ecx

 00000667			L_LineCheck:
 00000667  A1 00003B4E R		mov eax, lineStatus[0]
 0000066C  0F A4 05			shld lineStatus[TYPE lineStatus], eax, 1
	   00003B52 R 01
 00000674  D1 15 00003B4E R		rcl lineStatus[0], 1
 0000067A  42				inc edx
 0000067B  73 09			jnc IncorrectChar
 0000067D  E2 E8			loop L_LineCheck

 0000067F  BF 00000001			mov edi, 1
 00000684  EB 05			jmp ReturnBits

 00000686			IncorrectChar:
 00000686  BF 00000000			mov edi, 0

 0000068B			ReturnBits:
 0000068B  8B CA			mov ecx, edx
 0000068D			L_ReturnBits:
 0000068D  A1 00003B52 R		mov eax, lineStatus[TYPE lineStatus]
 00000692  0F AC 05			shrd lineStatus[0], eax, 1
	   00003B4E R 01
 0000069A  D1 1D 00003B52 R		rcr lineStatus[TYPE lineStatus], 1
 000006A0  E2 EB			loop L_ReturnBits

 000006A2  83 FF 01			cmp edi, 1
 000006A5  75 03			jne LineIsIncorrect
 000006A7  F9				stc
 000006A8  EB 01			jmp LineIsCorrect

 000006AA			LineIsIncorrect:
 000006AA  F8				clc
 000006AB			LineIsCorrect:
					ret
 000006AB  5A		   *	    pop    edx
 000006AC  59		   *	    pop    ecx
 000006AD  5B		   *	    pop    ebx
 000006AE  58		   *	    pop    eax
 000006AF  C3		   *	    ret    00000h
 000006B0			CheckLineStatus endp


				end main
Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/11/23 12:20:37
TypingTutor.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003C39 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006B0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckLineStatus  . . . . . . . .	P Near	 0000064B _TEXT	Length= 00000065 Public STDCALL
  IncompleteLine . . . . . . . .	L Near	 00000666 _TEXT	
  L_LineCheck  . . . . . . . . .	L Near	 00000667 _TEXT	
  IncorrectChar  . . . . . . . .	L Near	 00000686 _TEXT	
  ReturnBits . . . . . . . . . .	L Near	 0000068B _TEXT	
  L_ReturnBits . . . . . . . . .	L Near	 0000068D _TEXT	
  LineIsIncorrect  . . . . . . .	L Near	 000006AA _TEXT	
  LineIsCorrect  . . . . . . . .	L Near	 000006AB _TEXT	
ClearDisplayLine . . . . . . . .	P Near	 00000451 _TEXT	Length= 00000028 Public STDCALL
  spaceWrite . . . . . . . . . .	L Near	 0000045C _TEXT	
ClearLineStatus  . . . . . . . .	P Near	 0000062B _TEXT	Length= 00000020 Public STDCALL
  StatusClearing . . . . . . . .	L Near	 00000631 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseInputFile . . . . . . . . .	P Near	 00000331 _TEXT	Length= 0000000D Public STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CorrectInput . . . . . . . . . .	P Near	 000005E2 _TEXT	Length= 0000001D Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LEADERBOARD  . . . . . . . . . .	P Near	 000002B6 _TEXT	Length= 00000012 Public STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NewLine  . . . . . . . . . . . .	P Near	 0000043B _TEXT	Length= 00000016 Public STDCALL
NewPromptLine  . . . . . . . . .	P Near	 0000033E _TEXT	Length= 0000006C Public STDCALL
  ReturnToOriginalPos  . . . . .	L Near	 00000396 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PLAY_GAME  . . . . . . . . . . .	P Near	 000000BA _TEXT	Length= 000001FC Public STDCALL
  MainGameLoop . . . . . . . . .	L Near	 0000018E _TEXT	
  KeyRead  . . . . . . . . . . .	L Near	 000001D6 _TEXT	
  CheckBackspace . . . . . . . .	L Near	 000001ED _TEXT	
  checkCharEqual . . . . . . . .	L Near	 0000020E _TEXT	
  CharNotEqual . . . . . . . . .	L Near	 00000233 _TEXT	
  LineEndCheck . . . . . . . . .	L Near	 00000242 _TEXT	
  finishCheck  . . . . . . . . .	L Near	 0000026F _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000002A0 _TEXT	
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReplacePreviousChar  . . . . . .	P Near	 00000479 _TEXT	Length= 00000033 Public STDCALL
ReprintPrompt  . . . . . . . . .	P Near	 000003AA _TEXT	Length= 00000033 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 000003B3 _TEXT	
  writeChars . . . . . . . . . .	L Near	 000003C2 _TEXT	
  continuePrintLoop  . . . . . .	L Near	 000003D7 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000003DB _TEXT	
ResetGame  . . . . . . . . . . .	P Near	 00000562 _TEXT	Length= 00000080 Public STDCALL
  ResetColors  . . . . . . . . .	L Near	 000005AE _TEXT	
  ResetLineStatus  . . . . . . .	L Near	 000005C9 _TEXT	
RevertLineStatus . . . . . . . .	P Near	 00000615 _TEXT	Length= 00000016 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateCursorPos  . . . . . . . .	P Near	 0000041B _TEXT	Length= 00000020 Public STDCALL
UpdateScoreboard . . . . . . . .	P Near	 000004AC _TEXT	Length= 000000B6 Public STDCALL
  NotComplete  . . . . . . . . .	L Near	 00000546 _TEXT	
  Complete . . . . . . . . . . .	L Near	 00000552 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFromColorArr  . . . . . . .	P Near	 000003DD _TEXT	Length= 0000001E Public STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToColorArr  . . . . . . . .	P Near	 000003FB _TEXT	Length= 00000020 Public STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WrongInput . . . . . . . . . . .	P Near	 000005FF _TEXT	Length= 00000016 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BA Public STDCALL
  MainMenu . . . . . . . . . . .	L Near	 00000000 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000008E _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000A4 _TEXT	
openFile . . . . . . . . . . . .	P Near	 000002C8 _TEXT	Length= 00000069 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 000002EA _TEXT	
  check_buffer_size  . . . . . .	L Near	 00000318 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000330 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000000A _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000001F _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000002C _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000040 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00003B67 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00003B7C _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00003B91 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00003BA6 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00003BB8 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00003BC8 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00003BDB _DATA	
??000B . . . . . . . . . . . . .	Byte	 00003BF0 _DATA	
??000C . . . . . . . . . . . . .	Byte	 00003C17 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00003C19 _DATA	
??000E . . . . . . . . . . . . .	Byte	 00003C27 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EntrySize  . . . . . . . . . . .	Number	 00000005h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_UNREAD  . . . . . . . . . .	Number	 -00000001h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INFO_COLUMN_X  . . . . . . . . .	Number	 00000050h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LENGTH  . . . . . . . . . .	Number	 00000040h   
LINE_SPACING . . . . . . . . . .	Number	 00000002h   
MAIN_MENU_X_OFFSET . . . . . . .	Number	 0000001Eh   
MAIN_MENU_Y_OFFSET . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MenuTable  . . . . . . . . . . .	Byte	 00000000 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumberOfEntries  . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLAY_AREA_X_OFFSET . . . . . . .	Number	 0000000Ah   
PLAY_AREA_Y_OFFSET . . . . . . .	Number	 00000002h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCOREBOARD_Y . . . . . . . . . .	Number	 00000006h   
SCORE_LABEL_LENGTH . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SECOND_IN_TICKS  . . . . . . . .	Number	 00000014h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STARTING_DISTANCE  . . . . . . .	Number	 00000018h   
STARTING_PROGRESSION_SPEED . . .	Number	 0000003Ch   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TICK . . . . . . . . . . . . . .	Number	 00000032h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
backspacesPressed  . . . . . . .	DWord	 00003B63 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charIdx  . . . . . . . . . . . .	DWord	 0000143A _DATA	
charsTyped . . . . . . . . . . .	DWord	 00003B5F _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00003B56 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00003B57 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
distanceFromTop  . . . . . . . .	Byte	 00003B58 _DATA	
divider  . . . . . . . . . . . .	Byte	 00000045 _DATA	
endingMsg  . . . . . . . . . . .	Byte	 00000086 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00001432 _DATA	
filename . . . . . . . . . . . .	Byte	 00001429 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linePrintCharIdx . . . . . . . .	DWord	 00003B5A _DATA	
linePrintTicksElapsed  . . . . .	Byte	 00003B59 _DATA	
lineProgressSpeed  . . . . . . .	Byte	 00003B5E _DATA	
lineStatus . . . . . . . . . . .	DWord	 00003B4E _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
textColors . . . . . . . . . . .	Word	 0000143E _DATA	
typingPromptLeftBound  . . . . .	DWord	 00001436 _DATA	
typingPromptSize . . . . . . . .	DWord	 00001425 _DATA	
typingPrompt . . . . . . . . . .	Byte	 0000009D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
