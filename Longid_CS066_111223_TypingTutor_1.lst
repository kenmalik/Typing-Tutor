Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/11/23 22:00:55
TypingTutor.asm						     Page 1 - 1


				; TypingTutor.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
TypingTutor.asm(7) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 31			MenuTable BYTE '1'
 00000001  000000C5 R			DWORD PLAY_GAME
 00000005 = 00000005		EntrySize = ($ - MenuTable)
 00000005  32				BYTE '2'
 00000006  00000A6B R			DWORD LEADERBOARD
 0000000A = 00000002		NumberOfEntries = ($ - MenuTable) / EntrySize

 00000000			.code
 00000000			main proc
 = 00000023				MAIN_MENU_X = 35
 = 0000000A				MAIN_MENU_Y = 10
 = 00000002				LINE_SPACING = 2

 00000000			MainMenu:
					; Clear screen to prevent weird screen color
 00000000  B8 0000000F			mov eax, white+(black*16)
 00000005  E8 00000000 E		call SetTextColor
 0000000A  E8 00000000 E		call Clrscr

					; Display title
 0000000F  B8 000000E0			mov eax, black + (yellow * 16)
 00000014  E8 00000000 E		call SetTextColor

					mGotoxy MAIN_MENU_X, MAIN_MENU_Y
 00000019  52		     1		push edx
 0000001A  B6 0A	     1		mov  dh,MAIN_MENU_Y
 0000001C  B2 23	     1		mov  dl,MAIN_MENU_X
 0000001E  E8 00000000 E     1		call Gotoxy
 00000023  5A		     1		pop  edx
					mWrite "        TYPING TUTOR        "
 0000000A		     1		.data		
 0000000A 20 20 20 20 20     1		??0000 BYTE "        TYPING TUTOR        ",0	
	   20 20 20 54 59
	   50 49 4E 47 20
	   54 55 54 4F 52
	   20 20 20 20 20
	   20 20 20 00
 00000024		     1		.code
 00000024  52		     1		push	edx
 00000025  BA 0000000A R     1		mov	edx,OFFSET ??0000
 0000002A  E8 00000000 E     1		call	WriteString
 0000002F  5A		     1		pop	edx

					; Display menu options
 00000030  B8 0000000E			mov eax, yellow+(black*16)
 00000035  E8 00000000 E		call SetTextColor

					mGotoxy MAIN_MENU_X, MAIN_MENU_Y + LINE_SPACING
 0000003A  52		     1		push edx
 0000003B  B6 0C	     1		mov  dh,MAIN_MENU_Y + LINE_SPACING
 0000003D  B2 23	     1		mov  dl,MAIN_MENU_X
 0000003F  E8 00000000 E     1		call Gotoxy
 00000044  5A		     1		pop  edx
					mWrite "1. Play Game"
 00000027		     1		.data		
 00000027 31 2E 20 50 6C     1		??0001 BYTE "1. Play Game",0	
	   61 79 20 47 61
	   6D 65 00
 00000045		     1		.code
 00000045  52		     1		push	edx
 00000046  BA 00000027 R     1		mov	edx,OFFSET ??0001
 0000004B  E8 00000000 E     1		call	WriteString
 00000050  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X, MAIN_MENU_Y + LINE_SPACING * 2
 00000051  52		     1		push edx
 00000052  B6 0E	     1		mov  dh,MAIN_MENU_Y + LINE_SPACING * 2
 00000054  B2 23	     1		mov  dl,MAIN_MENU_X
 00000056  E8 00000000 E     1		call Gotoxy
 0000005B  5A		     1		pop  edx
					mWrite "2. View Leaderboard"
 00000034		     1		.data		
 00000034 32 2E 20 56 69     1		??0002 BYTE "2. View Leaderboard",0	
	   65 77 20 4C 65
	   61 64 65 72 62
	   6F 61 72 64 00
 0000005C		     1		.code
 0000005C  52		     1		push	edx
 0000005D  BA 00000034 R     1		mov	edx,OFFSET ??0002
 00000062  E8 00000000 E     1		call	WriteString
 00000067  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X, MAIN_MENU_Y + LINE_SPACING * 3
 00000068  52		     1		push edx
 00000069  B6 10	     1		mov  dh,MAIN_MENU_Y + LINE_SPACING * 3
 0000006B  B2 23	     1		mov  dl,MAIN_MENU_X
 0000006D  E8 00000000 E     1		call Gotoxy
 00000072  5A		     1		pop  edx
					mWrite "Press number to select menu."
 00000048		     1		.data		
 00000048 50 72 65 73 73     1		??0003 BYTE "Press number to select menu.",0	
	   20 6E 75 6D 62
	   65 72 20 74 6F
	   20 73 65 6C 65
	   63 74 20 6D 65
	   6E 75 2E 00
 00000073		     1		.code
 00000073  52		     1		push	edx
 00000074  BA 00000048 R     1		mov	edx,OFFSET ??0003
 00000079  E8 00000000 E     1		call	WriteString
 0000007E  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X, MAIN_MENU_Y + LINE_SPACING * 4
 0000007F  52		     1		push edx
 00000080  B6 12	     1		mov  dh,MAIN_MENU_Y + LINE_SPACING * 4
 00000082  B2 23	     1		mov  dl,MAIN_MENU_X
 00000084  E8 00000000 E     1		call Gotoxy
 00000089  5A		     1		pop  edx

 0000008A  E8 00000000 E		call ReadChar
 0000008F  BB 00000000 R		mov ebx, OFFSET MenuTable
 00000094  B9 00000002			mov ecx, NumberOfEntries

 00000099			L1:
 00000099  3A 03			cmp al, [ebx]				; Inputted char = lookup value?
 0000009B  75 12			jne L2

 0000009D  E8 00000000 E		call Clrscr					; Run menu procedure
 000000A2  FF 53 01			call NEAR PTR [ebx + 1]
 000000A5  E8 00000000 E		call Crlf
 000000AA  E9 FFFFFF51			jmp MainMenu

 000000AF			L2:
 000000AF  81 C3 00000005		add ebx, EntrySize			; Go to next entry
 000000B5  E2 E2			loop L1

					exit						; If no matching entries found, exit
 000000B7  6A 00	   *	    push   +000000000h
 000000B9  E8 00000000 E   *	    call   ExitProcess


					invoke ExitProcess,0
 000000BE  6A 00	   *	    push   +000000000h
 000000C0  E8 00000000 E   *	    call   ExitProcess
 000000C5			main endp


				;-------------------------------------------------------------------------------
				;                                 MAIN GAME
				;-------------------------------------------------------------------------------


				; Play area bounds
 = 00000002			PLAY_AREA_Y = 2
 = 0000000A			PLAY_AREA_X = 10
 = 00000040			LINE_LENGTH = 64
 = 00000018			STARTING_DISTANCE = 24
 = 00000050			INFO_COLUMN_X = PLAY_AREA_X + LINE_LENGTH + 6
 = 00000006			SCOREBOARD_Y = PLAY_AREA_Y + 4
 = 00000014			SCORE_LABEL_LENGTH = 20

				; File reading utilities
 = 00001388			BUFFER_SIZE = 5000
 =-00000001			FILE_UNREAD = -1

				; Game logic timing
 = 00000032			TICK = 50	; in milliseconds
 = 00000014			SECOND_IN_TICKS = 20
 = 00000014			STARTING_PROGRESSION_SPEED = SECOND_IN_TICKS


 00000065			.data
					; Graphics elements
 00000065  00000040 [			divider BYTE LINE_LENGTH DUP("-"), 0
	    2D
	   ] 00
 000000A6 2D 2D 2D 20 4C		endingMsg BYTE "--- Level Complete ---", 0
	   65 76 65 6C 20
	   43 6F 6D 70 6C
	   65 74 65 20 2D
	   2D 2D 00

					; For file handling
 000000BD  00001388 [			typingPrompt BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 00001445 00000000			typingPromptSize DWORD 0
 00001449 54 65 78 74 2E		filename BYTE "Text.txt", 0
	   74 78 74 00
 00001452 00000000			fileHandle HANDLE ?

					; Typing prompt data
 00001456 00000000			typingPromptLeftBound DWORD 0
 0000145A 00000000			charIdx DWORD 0
 0000145E  00001387 [			textColors WORD LENGTHOF typingPrompt - 1 DUP(black+(white*16)), 0
	    00F0
	   ] 0000
 00003B6E 00000000			lineStatus DWORD 0, 0
	   00000000

					; Cursor position data
 00003B76 00				cursorX BYTE 0
 00003B77 00				cursorY BYTE 0
 00003B78 18				distanceFromTop BYTE STARTING_DISTANCE

					; Game timing
 00003B79 00				linePrintTicksElapsed BYTE 0
 00003B7A 00000000			typingPromptRightBound DWORD 0
 00003B7E 14				lineProgressSpeed BYTE STARTING_PROGRESSION_SPEED
 00003B7F 00000000			timerTicks DWORD 0

					; Score counters
 00003B83 00000000			charsTyped DWORD 0
 00003B87 00000000			backspacesPressed DWORD 0
 00003B8B 00000000			secondsPlayed DWORD 0
 00003B8F 00000000			linesCleared DWORD 0


 000000C5			.code
 000000C5			PLAY_GAME proc
 000000C5  E8 0000044E			call ResetGame	; Reset game data every new game

					; Read file to memory
 000000CA  BA 00001449 R		mov edx, OFFSET filename
 000000CF  E8 000001DC			call OpenFile
 000000D4  83 F8 FF			cmp eax, FILE_UNREAD
 000000D7  0F 84 000001D2		je Quit
 000000DD  E8 00000237			call closeInputFile
					
					; Graphical elements
 000000E2  E8 00000783			call DisplayPlayArea
 000000E7  E8 000005C5			call GameStart

					; Set to standard color
 000000EC  B8 000000F0			mov eax, black + (white * 16)
 000000F1  E8 00000000 E		call SetTextColor

					; Initial cursor positioning
 000000F6  B6 02			mov dh, PLAY_AREA_Y
 000000F8  02 35 00003B78 R		add dh, distanceFromTop
 000000FE  B2 0A			mov dl, PLAY_AREA_X
 00000100  E8 000002FE			call UpdateCursorPos


 00000105			MainGameLoop:
 00000105  B8 00000032		    mov  eax, TICK    
 0000010A  E8 00000000 E	    call Delay           ; Delay to ensure proper key read

 0000010F  FF 05 00003B7F R		inc timerTicks
 00000115  83 3D 00003B7F R		cmp timerTicks, SECOND_IN_TICKS
	   14
 0000011C  75 10			jne TimerNotSet
 0000011E  FF 05 00003B8B R		inc secondsPlayed
 00000124  C7 05 00003B7F R		mov timerTicks, 0
	   00000000

 0000012E			TimerNotSet:
 0000012E  E8 00000361			call UpdateScoreboard

					; If time to print another line of text prompt, do so
 00000133  FE 05 00003B79 R		inc linePrintTicksElapsed
 00000139  A0 00003B7E R		mov al, lineProgressSpeed
 0000013E  38 05 00003B79 R		cmp linePrintTicksElapsed, al
 00000144  75 35			jne KeyRead						; Else, read key

					; If reached top of play area, game over
 00000146  FE 0D 00003B78 R		dec distanceFromTop
 0000014C  80 3D 00003B78 R		cmp distanceFromTop, -1			
	   FF
 00000153  75 0A			jne AddLine
 00000155  E8 000005FF			call GameOver
 0000015A  E9 00000146			jmp GameStats

 0000015F			AddLine:
 0000015F  E8 000001C2			call NewPromptLine				; Print a new line of prompt
 00000164  80 3D 00003B7E R		cmp lineProgressSpeed, 10		; Line progress speed = 10?
	   0A
 0000016B  76 07			jbe IsMaxSpeed					; No: don't make faster
 0000016D  80 2D 00003B7E R		sub lineProgressSpeed, 1		; Yes: make faster
	   01

 00000174			IsMaxSpeed:
 00000174  C6 05 00003B79 R		mov linePrintTicksElapsed, 0	; Reset tick counter for display
	   00

 0000017B			KeyRead:
 0000017B  E8 00000000 E	    call ReadKey			; look for keyboard input
 00000180  74 83		    jz   MainGameLoop		; no key pressed yet

					; If at bottom of play area, don't do anything
 00000182  80 3D 00003B77 R		cmp cursorY, PLAY_AREA_Y + STARTING_DISTANCE
	   1A
 00000189  0F 84 FFFFFF76		je MainGameLoop

					; Check if escape pressed
 0000018F  66| 83 FA 1B			cmp dx, VK_ESCAPE
 00000193  75 01			jne CheckBackspace
 00000195  C3				ret

 00000196			CheckBackspace:
					; Check if backspace pressed
 00000196  66| 83 FA 08			cmp dx, VK_BACK
 0000019A  75 22			jne checkCharEqual				; If not backspace, process inputted character

					; Backspace was pressed
 0000019C  80 3D 00003B76 R		cmp cursorX, PLAY_AREA_X	; If on char 0, don't do anything
	   0A
 000001A3  0F 84 FFFFFF5C		je MainGameLoop

 000001A9  FF 05 00003B87 R		inc backspacesPressed
 000001AF  E8 000002AD			call ReplacePreviousChar
 000001B4  E8 00000426			call RevertLineStatus
 000001B9  E9 FFFFFF47			jmp MainGameLoop

 000001BE			checkCharEqual:
 000001BE  FF 05 00003B83 R		inc charsTyped

					; Compare input with text
 000001C4  8B 3D 0000145A R		mov edi, charIdx
 000001CA  3A 87 000000BD R		cmp    al, typingPrompt[edi]
 000001D0  75 11			jne    CharNotEqual

					; If character is equal
 000001D2  B8 0000002F			mov eax, white + (green * 16)
 000001D7  E8 00000207			call WriteToColorArr
 000001DC  E8 000003CB			call CorrectInput
 000001E1  EB 0F			jmp LineEndCheck

 000001E3			CharNotEqual:
 000001E3  B8 0000004F			mov eax, white + (red * 16)
 000001E8  E8 000001F6			call WriteToColorArr
 000001ED  E8 000003D7			call WrongInput

 000001F2			LineEndCheck:
 000001F2  FF 05 0000145A R		inc    charIdx
 000001F8  80 3D 00003B76 R		cmp cursorX, LINE_LENGTH + PLAY_AREA_X
	   4A
 000001FF  75 51			jne finishCheck

 00000201  E8 0000040F			call CheckLineStatus
 00000206  72 15			jc ClearLine
 00000208  E8 00000254			call ReplacePreviousChar
 0000020D  E8 000003CD			call RevertLineStatus
 00000212  FF 0D 00003B83 R		dec charsTyped
 00000218  E9 FFFFFEE8			jmp MainGameLoop

 0000021D			ClearLine:
					; Clear completed lines
 0000021D  8B 1D 00001456 R		mov ebx, typingPromptLeftBound
 00000223  E8 000003CD			call ClearLineStatus
 00000228  8A 35 00003B77 R		mov dh, cursorY
 0000022E  B2 0A			mov dl, PLAY_AREA_X
 00000230  E8 000001CE			call UpdateCursorPos					; Move cursor position for display clearing
 00000235  E8 000001FF			call ClearDisplayLine
 0000023A  E8 000001E4			call NewLine
 0000023F  83 05 00001456 R		add typingPromptLeftBound, LINE_LENGTH	; Move left bound for typing prompt forward
	   40
 00000246  FE 05 00003B78 R		inc distanceFromTop						; Inc distance from top to account for cleared line
 0000024C  FF 05 00003B8F R		inc linesCleared

 00000252			finishCheck:
					; If not finished yet
 00000252  80 BF 000000BE R		cmp    typingPrompt[edi + 1], 0
	   00
 00000259  0F 85 FFFFFEA6		jne    MainGameLoop

 0000025F  8B 1D 00001456 R		mov ebx, typingPromptLeftBound
 00000265  E8 000003AB			call CheckLineStatus
 0000026A  72 15			jc LevelComplete
 0000026C  E8 000001F0			call ReplacePreviousChar
 00000271  E8 00000369			call RevertLineStatus
 00000276  FF 0D 00003B83 R		dec charsTyped
 0000027C  E9 FFFFFE84			jmp MainGameLoop


 00000281			LevelComplete:
 00000281  C6 05 00003B76 R		mov cursorX, PLAY_AREA_X
	   0A
					mGotoxy cursorX, cursorY
 00000288  52		     1		push edx
 00000289  8A 35 00003B77 R  1		mov  dh,cursorY
 0000028F  8A 15 00003B76 R  1		mov  dl,cursorX
 00000295  E8 00000000 E     1		call Gotoxy
 0000029A  5A		     1		pop  edx
 0000029B  E8 00000199			call ClearDisplayLine
 000002A0  E8 0000056F			call LevelCleared

 000002A5			GameStats:
 000002A5  E8 00000000 E		call Clrscr
 000002AA  E8 00000693			call DisplayScores

 000002AF			Quit:
 000002AF  C3				ret
 000002B0			PLAY_GAME endp


				;-------------------------------------------------------------------------------
				;                             MAIN GAME PROCEDURES
				;-------------------------------------------------------------------------------


				;-------------------------------------------------------------------------------
				; OpenFile
				;
				; Opens the file whose name is stored in filename. Verifies file is opened and
				; that contents are within designated buffer size.
				; Receives: EDX = Offset of the filename to be opened.
				; Returns:  EAX = Bytes read (set to FILE_UNREAD if error occurs).
				;-------------------------------------------------------------------------------
 000002B0			OpenFile proc
 000002B0  E8 00000000 E		call OpenInputFile
 000002B5  A3 00001452 R		mov fileHandle, eax

 000002BA  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 000002BD  75 13			jne FileOk
					mWrite <"Cannot open file", 0dh, 0ah>
 00003B93		     1		.data		
 00003B93 43 61 6E 6E 6F     1		??0004 BYTE "Cannot open file", 0dh, 0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 000002BF		     1		.code
 000002BF  52		     1		push	edx
 000002C0  BA 00003B93 R     1		mov	edx,OFFSET ??0004
 000002C5  E8 00000000 E     1		call	WriteString
 000002CA  5A		     1		pop	edx
 000002CB  B8 FFFFFFFF			mov eax, FILE_UNREAD
 000002D0  EB 46			jmp Quit

 000002D2			FileOk:
 000002D2  BA 000000BD R		mov edx, OFFSET typingPrompt
 000002D7  B9 00001388			mov ecx, BUFFER_SIZE
 000002DC  E8 00000000 E		call ReadFromFile
 000002E1  A3 00001445 R		mov typingPromptSize, eax
 000002E6  73 18			jnc CheckBufferSize
					mWrite "Error reading file. "
 00003BA6		     1		.data		
 00003BA6 45 72 72 6F 72     1		??0005 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 000002E8		     1		.code
 000002E8  52		     1		push	edx
 000002E9  BA 00003BA6 R     1		mov	edx,OFFSET ??0005
 000002EE  E8 00000000 E     1		call	WriteString
 000002F3  5A		     1		pop	edx
 000002F4  E8 00000000 E		call WriteWindowsMsg
 000002F9  B8 FFFFFFFF			mov eax, FILE_UNREAD
 000002FE  EB 18			jmp Quit
					
 00000300			CheckBufferSize:
 00000300  3D 00001388			cmp eax, BUFFER_SIZE
 00000305  72 11			jb Quit
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 00003BBB		     1		.data		
 00003BBB 45 72 72 6F 72     1		??0006 BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 00000307		     1		.code
 00000307  52		     1		push	edx
 00000308  BA 00003BBB R     1		mov	edx,OFFSET ??0006
 0000030D  E8 00000000 E     1		call	WriteString
 00000312  5A		     1		pop	edx
 00000313  B8 FFFFFFFF			mov eax, FILE_UNREAD

 00000318			Quit:
 00000318  C3				ret
 00000319			OpenFile endp


				;-------------------------------------------------------------------------------
				; CloseInputFile
				;
				; Closes the file currently in fileHandle.
				;-------------------------------------------------------------------------------
 00000319			CloseInputFile proc USES eax
 00000319  50		   *	    push   eax
 0000031A  A1 00001452 R		mov eax, fileHandle
 0000031F  E8 00000000 E		call CloseFile
					ret
 00000324  58		   *	    pop    eax
 00000325  C3		   *	    ret    00000h
 00000326			CloseInputFile endp


				;-------------------------------------------------------------------------------
				; NewPromptLine
				;
				; Writes a new line in the typing prompt.
				;-------------------------------------------------------------------------------
 00000326			NewPromptLine proc USES eax ebx ecx edx
					; Push cursor position to stack
 00000326  50		   *	    push   eax
 00000327  53		   *	    push   ebx
 00000328  51		   *	    push   ecx
 00000329  52		   *	    push   edx
 0000032A  66| 0F B6 05			movzx ax, cursorX
	   00003B76 R
 00000332  66| 50			push ax
 00000334  66| 0F B6 05			movzx ax, cursorY
	   00003B77 R
 0000033C  66| 50			push ax

					; Set cursor position to rewrite block of text
 0000033E  8A 35 00003B78 R		mov dh, distanceFromTop
 00000344  80 C6 02			add dh, PLAY_AREA_Y
 00000347  B2 0A			mov dl, PLAY_AREA_X
 00000349  E8 000000B5			call UpdateCursorPos

					; Write text block
 0000034E  83 05 00003B7A R		add typingPromptRightBound, LINE_LENGTH
	   40
 00000355  BA 000000BD R		mov edx, OFFSET typingPrompt
 0000035A  8B 0D 00003B7A R		mov ecx, typingPromptRightBound
 00000360  8B 1D 00001456 R		mov ebx, typingPromptLeftBound
 00000366  E8 00000027			call ReprintPrompt
					
 0000036B  E8 000000B3			call NewLine	; Move cursor to line below written prompt

					; If cursor is not at bottom of play area, clear the display line below prompt
 00000370  80 3D 00003B77 R		cmp cursorY, PLAY_AREA_Y + STARTING_DISTANCE
	   1A
 00000377  74 05			je ReturnToOriginalPos
 00000379  E8 000000BB			call ClearDisplayLine
					
 0000037E			ReturnToOriginalPos:
					; Pop original cursor position to return to former position
 0000037E  66| 58			pop ax
 00000380  FE C8			dec al			; Cursor y has to decrement to account for prompt having moved
 00000382  8A F0			mov dh, al
 00000384  66| 58			pop ax
 00000386  8A D0			mov dl, al
 00000388  E8 00000076			call UpdateCursorPos
					ret
 0000038D  5A		   *	    pop    edx
 0000038E  59		   *	    pop    ecx
 0000038F  5B		   *	    pop    ebx
 00000390  58		   *	    pop    eax
 00000391  C3		   *	    ret    00000h
 00000392			NewPromptLine endp


				;-------------------------------------------------------------------------------
				; ReprintPrompt
				;
				; Reprints typing prompt using colors from text colors from colors array
				; Receives: EDX = OFFSET of typing prompt
				;			EBX = The index of typing prompt to start printing from
				;			ECX = The index of typing prompt to stop printing at
				;-------------------------------------------------------------------------------
 00000392			ReprintPrompt proc USES edi
 00000392  57		   *	    push   edi
 00000393  BF 00000000		 	mov edi, 0				; Counter for if line length was reached
 00000398  8A 04 1A			mov al, [edx + ebx]

 0000039B			printLoop:
					; If reached line length, start new line
 0000039B  83 FF 40			cmp edi, LINE_LENGTH
 0000039E  75 0A			jne writeChars
 000003A0  E8 0000007E			call NewLine
 000003A5  BF 00000000			mov edi, 0

 000003AA			writeChars:
 000003AA  E8 00000016			call WriteFromColorArr

					; Break if end of string
 000003AF  43				inc ebx
 000003B0  47				inc edi
 000003B1  8A 04 1A			mov al, [edx + ebx]
 000003B4  3C 00			cmp al, 0
 000003B6  75 07			jne continuePrintLoop

 000003B8  E8 0000007C			call ClearDisplayLine	; Clear the rest of the display line
 000003BD  EB 04			jmp Quit

 000003BF			continuePrintLoop:
 000003BF  3B D9			cmp ebx, ecx
 000003C1  75 D8			jne printLoop
					
 000003C3			Quit:
					ret
 000003C3  5F		   *	    pop    edi
 000003C4  C3		   *	    ret    00000h
 000003C5			ReprintPrompt endp


				;-------------------------------------------------------------------------------
				; WriteFromColorArr
				;
				; Writes a colored character to display using colors from text colors array.
				; Receives: EBX = Index of character in array to write
				;-------------------------------------------------------------------------------
 000003C5			WriteFromColorArr proc USES ecx
 000003C5  51		   *	    push   ecx
 000003C6  FE 05 00003B76 R		inc cursorX
 000003CC  B9 0000145E R		mov ecx, OFFSET textColors	; Get a reference to text colors array

 000003D1  8B 04 59			mov eax, [ecx + (ebx * TYPE textColors)]	; Select color from array
 000003D4  E8 00000000 E		call SetTextColor

 000003D9  8A 04 1A			mov al, [edx + ebx]			; Write character in selected color
 000003DC  E8 00000000 E		call WriteChar
					
					ret
 000003E1  59		   *	    pop    ecx
 000003E2  C3		   *	    ret    00000h
 000003E3			WriteFromColorArr endp


				;-------------------------------------------------------------------------------
				; WriteToColorArr
				;
				; Writes a charater in a given color and saves that color to textColors array.
				; Receives: EAX = the color to write in and save to textColors array
				;			EDI = the index of color array to write to.
				;-------------------------------------------------------------------------------
 000003E3			WriteToColorArr proc
 000003E3  E8 00000000 E		call SetTextColor
 000003E8  66| 89 04 7D			mov textColors[edi * TYPE textColors], ax	; Save color
	   0000145E R
 000003F0  0F B6 87			movzx eax, typingPrompt[edi]
	   000000BD R
 000003F7  E8 00000000 E		call WriteChar
 000003FC  FE 05 00003B76 R		inc cursorX
 00000402  C3				ret
 00000403			WriteToColorArr endp


				;-------------------------------------------------------------------------------
				; UpdateCursorPos
				;
				; Moves cursor to an (x,y) coordinate on screen and updates cursor location
				; varaibles accordingly.
				; Receives: DL = the x position to set cursor to
				;			DH = the y position to set cursor to
				;-------------------------------------------------------------------------------
 00000403			UpdateCursorPos proc
 00000403  88 15 00003B76 R		mov cursorX, dl
 00000409  88 35 00003B77 R		mov cursorY, dh
					mGotoxy cursorX, cursorY
 0000040F  52		     1		push edx
 00000410  8A 35 00003B77 R  1		mov  dh,cursorY
 00000416  8A 15 00003B76 R  1		mov  dl,cursorX
 0000041C  E8 00000000 E     1		call Gotoxy
 00000421  5A		     1		pop  edx
 00000422  C3				ret
 00000423			UpdateCursorPos endp


				;-------------------------------------------------------------------------------
				; NewLine
				;
				; Moves cursor to the next line in play area.
				;-------------------------------------------------------------------------------
 00000423			NewLine proc USES edx
 00000423  52		   *	    push   edx
 00000424  FE 05 00003B77 R		inc cursorY
 0000042A  8A 35 00003B77 R		mov dh, cursorY
 00000430  B2 0A			mov dl, PLAY_AREA_X
 00000432  E8 FFFFFFCC			call UpdateCursorPos
					ret
 00000437  5A		   *	    pop    edx
 00000438  C3		   *	    ret    00000h
 00000439			NewLine endp


				;-------------------------------------------------------------------------------
				; ClearDisplayLine
				;
				; Clears a line of the play area starting from cursor's x coordinate.
				;-------------------------------------------------------------------------------
 00000439			ClearDisplayLine proc USES eax
 00000439  50		   *	    push   eax
 0000043A  B8 0000000F			mov eax, white+(black*16)
 0000043F  E8 00000000 E		call SetTextColor

 00000444			spaceWrite:
					mWriteSpace
 00003BE2		     1	.data
 00003BE2  00000001 [	     1	??0007 BYTE 1 DUP(' '),0
	    20
	   ] 00
 00000444		     1	.code
 00000444  52		     1		push	edx
 00000445  BA 00003BE2 R     1		mov	edx,OFFSET ??0007
 0000044A  E8 00000000 E     1		call	WriteString
 0000044F  5A		     1		pop	edx
 00000450  FE 05 00003B76 R		inc cursorX
 00000456  80 3D 00003B76 R		cmp cursorX, PLAY_AREA_X + LINE_LENGTH
	   4A
 0000045D  75 E5			jne spaceWrite
					
					ret
 0000045F  58		   *	    pop    eax
 00000460  C3		   *	    ret    00000h
 00000461			ClearDisplayLine endp


				;-------------------------------------------------------------------------------
				; ReplacePreviousChar
				;
				; Reverts color of previous character in play area and updates text color array
				; accordingly.
				;-------------------------------------------------------------------------------
 00000461			ReplacePreviousChar proc
 00000461  FE 0D 00003B76 R		dec cursorX
 00000467  8A 35 00003B77 R		mov dh, cursorY
 0000046D  8A 15 00003B76 R		mov dl, cursorX
 00000473  E8 FFFFFF8B			call UpdateCursorPos           ; Move cursor to previous char

 00000478  B8 000000F0			mov eax, black + (white * 16)  ; Reverting color of char (this moves cursor forward)
 0000047D  FF 0D 0000145A R		dec charIdx         
 00000483  8B 3D 0000145A R		mov edi, charIdx
 00000489  E8 FFFFFF55			call WriteToColorArr

 0000048E  E8 FFFFFF70			call UpdateCursorPos           ; Move cursor back to previous char's space

 00000493  C3				ret
 00000494			ReplacePreviousChar endp


				;-------------------------------------------------------------------------------
				; UpdateScoreboard
				;
				; Writes score information to info column.
				;-------------------------------------------------------------------------------
 00000494			UpdateScoreboard proc USES eax edx
					; Push cursor position to stack
 00000494  50		   *	    push   eax
 00000495  52		   *	    push   edx
 00000496  66| 0F B6 05			movzx ax, cursorX
	   00003B76 R
 0000049E  66| 50			push ax
 000004A0  66| 0F B6 05			movzx ax, cursorY
	   00003B77 R
 000004A8  66| 50			push ax

 000004AA  B8 0000000E			mov eax, yellow+(black*16)
 000004AF  E8 00000000 E		call SetTextColor

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y
 000004B4  52		     1		push edx
 000004B5  B6 06	     1		mov  dh,SCOREBOARD_Y
 000004B7  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 000004B9  E8 00000000 E     1		call Gotoxy
 000004BE  5A		     1		pop  edx
 000004BF  A1 00003B8B R		mov eax, secondsPlayed
 000004C4  E8 000001B0			call TimeFormat

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y + LINE_SPACING
 000004C9  52		     1		push edx
 000004CA  B6 08	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING
 000004CC  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 000004CE  E8 00000000 E     1		call Gotoxy
 000004D3  5A		     1		pop  edx
 000004D4  A1 00003B8F R		mov eax, linesCleared
 000004D9  E8 00000000 E		call WriteDec

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y + LINE_SPACING * 2
 000004DE  52		     1		push edx
 000004DF  B6 0A	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 2
 000004E1  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 000004E3  E8 00000000 E     1		call Gotoxy
 000004E8  5A		     1		pop  edx
 000004E9  A1 00003B83 R		mov eax, charsTyped
 000004EE  E8 00000000 E		call WriteDec

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y + LINE_SPACING * 3
 000004F3  52		     1		push edx
 000004F4  B6 0C	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 3
 000004F6  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 000004F8  E8 00000000 E     1		call Gotoxy
 000004FD  5A		     1		pop  edx
 000004FE  A1 00003B87 R		mov eax, backspacesPressed
 00000503  E8 00000000 E		call WriteDec

					; Pop original cursor position to return to former position
 00000508  66| 58			pop ax
 0000050A  8A F0			mov dh, al
 0000050C  66| 58			pop ax
 0000050E  8A D0			mov dl, al
 00000510  E8 FFFFFEEE			call UpdateCursorPos

					ret
 00000515  5A		   *	    pop    edx
 00000516  58		   *	    pop    eax
 00000517  C3		   *	    ret    00000h
 00000518			UpdateScoreboard endp


				;-------------------------------------------------------------------------------
				; ResetGame
				;
				; Resets game data for repeat sessions.
				;-------------------------------------------------------------------------------
 00000518			ResetGame proc
					; Reset scores
 00000518  C7 05 00003B83 R		mov charsTyped, 0
	   00000000
 00000522  C7 05 00003B87 R		mov backspacesPressed, 0
	   00000000
 0000052C  C7 05 00003B8F R		mov linesCleared, 0
	   00000000

					; Reset starting distance
 00000536  C6 05 00003B78 R		mov distanceFromTop, STARTING_DISTANCE
	   18

					; Reset typing prompt data
 0000053D  C7 05 00001456 R		mov typingPromptLeftBound, 0
	   00000000
 00000547  C7 05 0000145A R		mov charIdx, 0
	   00000000

					; Reset timing
 00000551  C6 05 00003B79 R		mov linePrintTicksElapsed, 0
	   00
 00000558  C7 05 00003B7A R		mov typingPromptRightBound, 0
	   00000000
 00000562  C6 05 00003B7E R		mov lineProgressSpeed, STARTING_PROGRESSION_SPEED
	   14
 00000569  C7 05 00003B8B R		mov secondsPlayed, 0
	   00000000

 00000573  B9 00001387			mov ecx, LENGTHOF textColors - 1
 00000578			ResetColors:
 00000578  66| C7 04 4D			mov textColors[ecx * TYPE textColors], black+(white*16)
	   0000145E R
	   00F0
 00000582  E2 F4			loop ResetColors
 00000584  66| C7 04 4D			mov textColors[ecx * TYPE textColors], black+(white*16)
	   0000145E R
	   00F0

 0000058E  B9 00000001			mov ecx, LENGTHOF lineStatus - 1
 00000593			ResetLineStatus:
 00000593  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B6E R
	   00000000
 0000059E  E2 D8			loop ResetColors
 000005A0  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B6E R
	   00000000

 000005AB  C3				ret
 000005AC			ResetGame endp


				;-------------------------------------------------------------------------------
				; CorrectInput
				;
				; Updates line status bit string to reflect correct input.
				;-------------------------------------------------------------------------------
 000005AC			CorrectInput proc USES eax
 000005AC  50		   *	    push   eax
 000005AD  A1 00003B6E R		mov eax, lineStatus[0]
 000005B2  0F AC 05			shrd lineStatus[TYPE lineStatus], eax, 1
	   00003B72 R 01
 000005BA  B8 00000001			mov eax, 1
 000005BF  0F AC 05			shrd lineStatus[0], eax, 1
	   00003B6E R 01
					ret
 000005C7  58		   *	    pop    eax
 000005C8  C3		   *	    ret    00000h
 000005C9			CorrectInput endp


				;-------------------------------------------------------------------------------
				; WrongInput
				;
				; Updates line status bit string to reflect incorrect input.
				;-------------------------------------------------------------------------------
 000005C9			WrongInput proc USES eax
 000005C9  50		   *	    push   eax
 000005CA  A1 00003B6E R		mov eax, lineStatus[0]
 000005CF  0F AC 05			shrd lineStatus[TYPE lineStatus], eax, 1
	   00003B72 R 01
 000005D7  D1 2D 00003B6E R		shr lineStatus[0], 1
					ret
 000005DD  58		   *	    pop    eax
 000005DE  C3		   *	    ret    00000h
 000005DF			WrongInput endp


				;-------------------------------------------------------------------------------
				; RevertLineStatus
				;
				; Reverts last change to line status bit string.
				;-------------------------------------------------------------------------------
 000005DF			RevertLineStatus proc USES eax
 000005DF  50		   *	    push   eax
 000005E0  A1 00003B72 R		mov eax, lineStatus[TYPE lineStatus]
 000005E5  0F A4 05			shld lineStatus[0], eax, 1
	   00003B6E R 01
 000005ED  D1 25 00003B72 R		shl lineStatus[TYPE lineStatus], 1
					ret
 000005F3  58		   *	    pop    eax
 000005F4  C3		   *	    ret    00000h
 000005F5			RevertLineStatus endp


				;-------------------------------------------------------------------------------
				; ClearLineStatus
				;
				; Sets line status bit string to zeros.
				;-------------------------------------------------------------------------------
 000005F5			ClearLineStatus proc USES eax
 000005F5  50		   *	    push   eax
 000005F6  B9 00000001			mov ecx, LENGTHOF lineStatus - 1
 000005FB			StatusClearing:
 000005FB  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B6E R
	   00000000
 00000606  E2 F3			loop StatusClearing
 00000608  C7 04 8D			mov lineStatus[ecx * TYPE lineStatus], 0
	   00003B6E R
	   00000000

					ret
 00000613  58		   *	    pop    eax
 00000614  C3		   *	    ret    00000h
 00000615			ClearLineStatus endp


				;-------------------------------------------------------------------------------
				; CheckLineStatus
				;
				; Reverts last change to line status bit string.
				; Recieves: EBX = left bound of typing prompt
				; Returns : CY = 0 if line not completely correct
				;			CY = 1 if line is completely correct
				;-------------------------------------------------------------------------------
 00000615			CheckLineStatus proc USES eax ebx ecx edx
 00000615  50		   *	    push   eax
 00000616  53		   *	    push   ebx
 00000617  51		   *	    push   ecx
 00000618  52		   *	    push   edx
 00000619  8B 0D 00001445 R		mov ecx, typingPromptSize
 0000061F  2B CB			sub ecx, ebx
 00000621  BA 00000000			mov edx, 0		; Counter for how many times rotated

 00000626  83 F9 40			cmp ecx, LINE_LENGTH
 00000629  76 05			jbe L_LineCheck
 0000062B  B9 00000040			mov ecx, LINE_LENGTH

 00000630			L_LineCheck:
 00000630  A1 00003B6E R		mov eax, lineStatus[0]
 00000635  0F A4 05			shld lineStatus[TYPE lineStatus], eax, 1
	   00003B72 R 01
 0000063D  D1 15 00003B6E R		rcl lineStatus[0], 1
 00000643  42				inc edx
 00000644  73 09			jnc IncorrectChar
 00000646  E2 E8			loop L_LineCheck

 00000648  BF 00000001			mov edi, 1
 0000064D  EB 05			jmp ReturnBits

 0000064F			IncorrectChar:
 0000064F  BF 00000000			mov edi, 0

 00000654			ReturnBits:
 00000654  8B CA			mov ecx, edx
 00000656			L_ReturnBits:
 00000656  A1 00003B72 R		mov eax, lineStatus[TYPE lineStatus]
 0000065B  0F AC 05			shrd lineStatus[0], eax, 1
	   00003B6E R 01
 00000663  D1 1D 00003B72 R		rcr lineStatus[TYPE lineStatus], 1
 00000669  E2 EB			loop L_ReturnBits

 0000066B  83 FF 01			cmp edi, 1
 0000066E  75 03			jne LineIsIncorrect
 00000670  F9				stc
 00000671  EB 01			jmp LineIsCorrect

 00000673			LineIsIncorrect:
 00000673  F8				clc
 00000674			LineIsCorrect:
					ret
 00000674  5A		   *	    pop    edx
 00000675  59		   *	    pop    ecx
 00000676  5B		   *	    pop    ebx
 00000677  58		   *	    pop    eax
 00000678  C3		   *	    ret    00000h
 00000679			CheckLineStatus endp


				;-------------------------------------------------------------------------------
				; TimeFormat
				;
				; Formats seconds as minutes:seconds.
				; Recieves: EAX = the amount of seconds
				;-------------------------------------------------------------------------------
 00000679			TimeFormat proc USES ebx
 00000679  53		   *	    push   ebx
 0000067A  BA 00000000			mov edx, 0	; Clear upper register
 0000067F  BB 0000003C			mov ebx, 60	; Divisor = 60 seconds
 00000684  F7 F3			div ebx		; EDX = seconds, EAX = minutes

					; Write minutes
 00000686  E8 00000000 E		call WriteDec
					mWrite ":"
 00003BE4		     1		.data		
 00003BE4 3A 00		     1		??0008 BYTE ":",0	
 0000068B		     1		.code
 0000068B  52		     1		push	edx
 0000068C  BA 00003BE4 R     1		mov	edx,OFFSET ??0008
 00000691  E8 00000000 E     1		call	WriteString
 00000696  5A		     1		pop	edx

					; Write seconds (zero-padded)
 00000697  8B C2			mov eax, edx
 00000699  83 F8 0A			cmp eax, 10
 0000069C  73 0C			jae TwoDigitSec
					mWrite "0"
 00003BE6		     1		.data		
 00003BE6 30 00		     1		??0009 BYTE "0",0	
 0000069E		     1		.code
 0000069E  52		     1		push	edx
 0000069F  BA 00003BE6 R     1		mov	edx,OFFSET ??0009
 000006A4  E8 00000000 E     1		call	WriteString
 000006A9  5A		     1		pop	edx
 000006AA			TwoDigitSec:
 000006AA  E8 00000000 E		call WriteDec

					ret
 000006AF  5B		   *	    pop    ebx
 000006B0  C3		   *	    ret    00000h
 000006B1			TimeFormat endp


				;-------------------------------------------------------------------------------
				; GameStart
				;
				; Displays game start message.
				;-------------------------------------------------------------------------------
 000006B1			GameStart proc
 000006B1  B9 00000003			mov ecx, 3		; Countdown start number

					; Set color to black on yellow
 000006B6  B8 000000E0			mov eax, black + (yellow * 16)
 000006BB  E8 00000000 E		call SetTextColor

 000006C0			Countdown:
 000006C0  B8 000003E8			mov eax, 50 * SECOND_IN_TICKS	; Wait one second
 000006C5  E8 00000000 E		call Delay

					; Write number
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 7, PLAY_AREA_Y + STARTING_DISTANCE / 2
 000006CA  52		     1		push edx
 000006CB  B6 0E	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2
 000006CD  B2 23	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 7
 000006CF  E8 00000000 E     1		call Gotoxy
 000006D4  5A		     1		pop  edx
					mWrite "      "
 00003BE8		     1		.data		
 00003BE8 20 20 20 20 20     1		??000A BYTE "      ",0	
	   20 00
 000006D5		     1		.code
 000006D5  52		     1		push	edx
 000006D6  BA 00003BE8 R     1		mov	edx,OFFSET ??000A
 000006DB  E8 00000000 E     1		call	WriteString
 000006E0  5A		     1		pop	edx
 000006E1  8B C1			mov eax, ecx
 000006E3  E8 00000000 E		call WriteDec
					mWrite "      "
 00003BEF		     1		.data		
 00003BEF 20 20 20 20 20     1		??000B BYTE "      ",0	
	   20 00
 000006E8		     1		.code
 000006E8  52		     1		push	edx
 000006E9  BA 00003BEF R     1		mov	edx,OFFSET ??000B
 000006EE  E8 00000000 E     1		call	WriteString
 000006F3  5A		     1		pop	edx

					; Move cursor out of center
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y + STARTING_DISTANCE
 000006F4  52		     1		push edx
 000006F5  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 000006F7  B2 0A	     1		mov  dl,PLAY_AREA_X
 000006F9  E8 00000000 E     1		call Gotoxy
 000006FE  5A		     1		pop  edx

 000006FF  E2 BF			loop Countdown

					; Display START
 00000701  B8 000003E8			mov eax, 50 * SECOND_IN_TICKS
 00000706  E8 00000000 E		call Delay
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 7, PLAY_AREA_Y + STARTING_DISTANCE / 2
 0000070B  52		     1		push edx
 0000070C  B6 0E	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2
 0000070E  B2 23	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 7
 00000710  E8 00000000 E     1		call Gotoxy
 00000715  5A		     1		pop  edx
					mWrite "    START    "
 00003BF6		     1		.data		
 00003BF6 20 20 20 20 53     1		??000C BYTE "    START    ",0	
	   54 41 52 54 20
	   20 20 20 00
 00000716		     1		.code
 00000716  52		     1		push	edx
 00000717  BA 00003BF6 R     1		mov	edx,OFFSET ??000C
 0000071C  E8 00000000 E     1		call	WriteString
 00000721  5A		     1		pop	edx

					; Move cursor out of center
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y + STARTING_DISTANCE
 00000722  52		     1		push edx
 00000723  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 00000725  B2 0A	     1		mov  dl,PLAY_AREA_X
 00000727  E8 00000000 E     1		call Gotoxy
 0000072C  5A		     1		pop  edx

					; Clear displayed messages
 0000072D  B8 00000000			mov eax, black + (black * 16)		; Set color for display removal
 00000732  E8 00000000 E		call SetTextColor
 00000737  B8 000003E8			mov eax, TICK * SECOND_IN_TICKS
 0000073C  E8 00000000 E		call Delay
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 7, PLAY_AREA_Y + STARTING_DISTANCE / 2
 00000741  52		     1		push edx
 00000742  B6 0E	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2
 00000744  B2 23	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 7
 00000746  E8 00000000 E     1		call Gotoxy
 0000074B  5A		     1		pop  edx
					mWrite "             "
 00003C04		     1		.data		
 00003C04 20 20 20 20 20     1		??000D BYTE "             ",0	
	   20 20 20 20 20
	   20 20 20 00
 0000074C		     1		.code
 0000074C  52		     1		push	edx
 0000074D  BA 00003C04 R     1		mov	edx,OFFSET ??000D
 00000752  E8 00000000 E     1		call	WriteString
 00000757  5A		     1		pop	edx

 00000758  C3				ret
 00000759			GameStart endp

				;-------------------------------------------------------------------------------
				; GameOver
				;
				; Displays game over message.
				;-------------------------------------------------------------------------------
 00000759			GameOver proc
 00000759  B9 00001387			mov ecx, LENGTHOF textColors - 1

 0000075E			ResetColors:
 0000075E  66| C7 04 4D			mov textColors[ecx * TYPE textColors], white+(red*16)
	   0000145E R
	   004F
 00000768  E2 F4			loop ResetColors
 0000076A  66| C7 04 4D			mov textColors[ecx * TYPE textColors], white+(red*16)
	   0000145E R
	   004F

					; Rewrite prompt in red
 00000774  B2 0A			mov dl, PLAY_AREA_X
 00000776  B6 02			mov dh, PLAY_AREA_Y
 00000778  E8 FFFFFC86			call UpdateCursorPos

 0000077D  BA 000000BD R		mov edx, OFFSET typingPrompt
 00000782  8B 1D 00001456 R		mov ebx, typingPromptLeftBound
 00000788  8B 0D 00003B7A R		mov ecx, typingPromptRightBound
 0000078E  E8 FFFFFBFF			call ReprintPrompt

 00000793  B2 0A			mov dl, PLAY_AREA_X
 00000795  B6 02			mov dh, PLAY_AREA_Y
 00000797  E8 FFFFFC67			call UpdateCursorPos

 0000079C  B8 00000BB8			mov eax, TICK * SECOND_IN_TICKS * 3
 000007A1  E8 00000000 E		call Delay

 000007A6			ClearLines:
 000007A6  B8 00000064			mov eax, TICK * 2
 000007AB  E8 00000000 E		call Delay
 000007B0  E8 FFFFFC84			call ClearDisplayLine
 000007B5  E8 FFFFFC69			call Newline
 000007BA  80 3D 00003B77 R		cmp cursorY, PLAY_AREA_Y + STARTING_DISTANCE
	   1A
 000007C1  75 E3			jne ClearLines

					; Display GAME OVER
 000007C3  B8 000000E0			mov eax, black + (yellow * 16)		; Set color for highlited message
 000007C8  E8 00000000 E		call SetTextColor
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 10, PLAY_AREA_Y + STARTING_DISTANCE / 2 - LINE_SPACING
 000007CD  52		     1		push edx
 000007CE  B6 0C	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2 - LINE_SPACING
 000007D0  B2 20	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 10
 000007D2  E8 00000000 E     1		call Gotoxy
 000007D7  5A		     1		pop  edx
					mWrite "    GAME OVER    "
 00003C12		     1		.data		
 00003C12 20 20 20 20 47     1		??000E BYTE "    GAME OVER    ",0	
	   41 4D 45 20 4F
	   56 45 52 20 20
	   20 20 00
 000007D8		     1		.code
 000007D8  52		     1		push	edx
 000007D9  BA 00003C12 R     1		mov	edx,OFFSET ??000E
 000007DE  E8 00000000 E     1		call	WriteString
 000007E3  5A		     1		pop	edx

					; Move cursor out of center
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y + STARTING_DISTANCE
 000007E4  52		     1		push edx
 000007E5  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 000007E7  B2 0A	     1		mov  dl,PLAY_AREA_X
 000007E9  E8 00000000 E     1		call Gotoxy
 000007EE  5A		     1		pop  edx
 000007EF  B8 000007D0			mov eax, TICK * SECOND_IN_TICKS * 2
 000007F4  E8 00000000 E		call Delay

					; Display "Press any key to continue..."
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 15, PLAY_AREA_Y + STARTING_DISTANCE / 2 
 000007F9  52		     1		push edx
 000007FA  B6 0E	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2
 000007FC  B2 1B	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 15
 000007FE  E8 00000000 E     1		call Gotoxy
 00000803  5A		     1		pop  edx
 00000804  B8 0000000E			mov eax, yellow + (black * 16)		; Set color for standard message
 00000809  E8 00000000 E		call SetTextColor
 0000080E  E8 00000000 E		call WaitMsg

 00000813  C3				ret
 00000814			GameOver endp


				;-------------------------------------------------------------------------------
				; LevelCleared
				;
				; Displays level cleared message.
				;-------------------------------------------------------------------------------
 00000814			LevelCleared proc
 00000814  B9 00000003			mov ecx, 3		; Countdown start number

					; Set color to black on yellow
 00000819  B8 000000E0			mov eax, black + (yellow * 16)
 0000081E  E8 00000000 E		call SetTextColor

					; Display LEVEL CLEARED
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 12, PLAY_AREA_Y + STARTING_DISTANCE / 2 - LINE_SPACING
 00000823  52		     1		push edx
 00000824  B6 0C	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2 - LINE_SPACING
 00000826  B2 1E	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 12
 00000828  E8 00000000 E     1		call Gotoxy
 0000082D  5A		     1		pop  edx
					mWrite "    LEVEL CLEARED    "
 00003C24		     1		.data		
 00003C24 20 20 20 20 4C     1		??000F BYTE "    LEVEL CLEARED    ",0	
	   45 56 45 4C 20
	   43 4C 45 41 52
	   45 44 20 20 20
	   20 00
 0000082E		     1		.code
 0000082E  52		     1		push	edx
 0000082F  BA 00003C24 R     1		mov	edx,OFFSET ??000F
 00000834  E8 00000000 E     1		call	WriteString
 00000839  5A		     1		pop	edx

					; Move cursor out of center
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y + STARTING_DISTANCE
 0000083A  52		     1		push edx
 0000083B  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 0000083D  B2 0A	     1		mov  dl,PLAY_AREA_X
 0000083F  E8 00000000 E     1		call Gotoxy
 00000844  5A		     1		pop  edx
 00000845  B8 000007D0			mov eax, TICK * SECOND_IN_TICKS * 2
 0000084A  E8 00000000 E		call Delay

					; Display "Press any key to continue..."
					mGotoxy PLAY_AREA_X + LINE_LENGTH / 2 - 15, PLAY_AREA_Y + STARTING_DISTANCE / 2 
 0000084F  52		     1		push edx
 00000850  B6 0E	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE / 2
 00000852  B2 1B	     1		mov  dl,PLAY_AREA_X + LINE_LENGTH / 2 - 15
 00000854  E8 00000000 E     1		call Gotoxy
 00000859  5A		     1		pop  edx
 0000085A  B8 0000000E			mov eax, yellow + (black * 16)		; Set color for standard message
 0000085F  E8 00000000 E		call SetTextColor
 00000864  E8 00000000 E		call WaitMsg

 00000869  C3				ret
 0000086A			LevelCleared endp


				;-------------------------------------------------------------------------------
				; DisplayPlayArea
				;
				; Displays the static graphic elements of the game.
				;-------------------------------------------------------------------------------
 0000086A			DisplayPlayArea proc
					; Game title
 0000086A  B8 000000E0			mov eax, black + (yellow * 16)
 0000086F  E8 00000000 E		call SetTextColor
					mGotoxy INFO_COLUMN_X, PLAY_AREA_Y + 2
 00000874  52		     1		push edx
 00000875  B6 04	     1		mov  dh,PLAY_AREA_Y + 2
 00000877  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000879  E8 00000000 E     1		call Gotoxy
 0000087E  5A		     1		pop  edx
					mWrite "    TYPING TUTOR    "
 00003C3A		     1		.data		
 00003C3A 20 20 20 20 54     1		??0010 BYTE "    TYPING TUTOR    ",0	
	   59 50 49 4E 47
	   20 54 55 54 4F
	   52 20 20 20 20
	   00
 0000087F		     1		.code
 0000087F  52		     1		push	edx
 00000880  BA 00003C3A R     1		mov	edx,OFFSET ??0010
 00000885  E8 00000000 E     1		call	WriteString
 0000088A  5A		     1		pop	edx

					; Top divider
 0000088B  B8 0000000E			mov eax, yellow + (black * 16)
 00000890  E8 00000000 E		call SetTextColor
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y - 1
 00000895  52		     1		push edx
 00000896  B6 01	     1		mov  dh,PLAY_AREA_Y - 1
 00000898  B2 0A	     1		mov  dl,PLAY_AREA_X
 0000089A  E8 00000000 E     1		call Gotoxy
 0000089F  5A		     1		pop  edx
					mWriteString OFFSET divider
 000008A0  52		     1		push edx
 000008A1  BA 00000065 R     1		mov  edx,OFFSET OFFSET divider
 000008A6  E8 00000000 E     1		call WriteString
 000008AB  5A		     1		pop  edx

					; Bottom divider
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y + STARTING_DISTANCE
 000008AC  52		     1		push edx
 000008AD  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 000008AF  B2 0A	     1		mov  dl,PLAY_AREA_X
 000008B1  E8 00000000 E     1		call Gotoxy
 000008B6  5A		     1		pop  edx
					mWriteString OFFSET divider
 000008B7  52		     1		push edx
 000008B8  BA 00000065 R     1		mov  edx,OFFSET OFFSET divider
 000008BD  E8 00000000 E     1		call WriteString
 000008C2  5A		     1		pop  edx

					; Scoreboard labels
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y
 000008C3  52		     1		push edx
 000008C4  B6 06	     1		mov  dh,SCOREBOARD_Y
 000008C6  B2 50	     1		mov  dl,INFO_COLUMN_X
 000008C8  E8 00000000 E     1		call Gotoxy
 000008CD  5A		     1		pop  edx
					mWrite "Minutes Elapsed   : "
 00003C4F		     1		.data		
 00003C4F 4D 69 6E 75 74     1		??0011 BYTE "Minutes Elapsed   : ",0	
	   65 73 20 45 6C
	   61 70 73 65 64
	   20 20 20 3A 20
	   00
 000008CE		     1		.code
 000008CE  52		     1		push	edx
 000008CF  BA 00003C4F R     1		mov	edx,OFFSET ??0011
 000008D4  E8 00000000 E     1		call	WriteString
 000008D9  5A		     1		pop	edx
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING
 000008DA  52		     1		push edx
 000008DB  B6 08	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING
 000008DD  B2 50	     1		mov  dl,INFO_COLUMN_X
 000008DF  E8 00000000 E     1		call Gotoxy
 000008E4  5A		     1		pop  edx
					mWrite "Lines Cleared     : "
 00003C64		     1		.data		
 00003C64 4C 69 6E 65 73     1		??0012 BYTE "Lines Cleared     : ",0	
	   20 43 6C 65 61
	   72 65 64 20 20
	   20 20 20 3A 20
	   00
 000008E5		     1		.code
 000008E5  52		     1		push	edx
 000008E6  BA 00003C64 R     1		mov	edx,OFFSET ??0012
 000008EB  E8 00000000 E     1		call	WriteString
 000008F0  5A		     1		pop	edx
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING * 2
 000008F1  52		     1		push edx
 000008F2  B6 0A	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 2
 000008F4  B2 50	     1		mov  dl,INFO_COLUMN_X
 000008F6  E8 00000000 E     1		call Gotoxy
 000008FB  5A		     1		pop  edx
					mWrite "Characters Typed  : "
 00003C79		     1		.data		
 00003C79 43 68 61 72 61     1		??0013 BYTE "Characters Typed  : ",0	
	   63 74 65 72 73
	   20 54 79 70 65
	   64 20 20 3A 20
	   00
 000008FC		     1		.code
 000008FC  52		     1		push	edx
 000008FD  BA 00003C79 R     1		mov	edx,OFFSET ??0013
 00000902  E8 00000000 E     1		call	WriteString
 00000907  5A		     1		pop	edx
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING * 3
 00000908  52		     1		push edx
 00000909  B6 0C	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING * 3
 0000090B  B2 50	     1		mov  dl,INFO_COLUMN_X
 0000090D  E8 00000000 E     1		call Gotoxy
 00000912  5A		     1		pop  edx
					mWrite "Backspaces Pressed: "
 00003C8E		     1		.data		
 00003C8E 42 61 63 6B 73     1		??0014 BYTE "Backspaces Pressed: ",0	
	   70 61 63 65 73
	   20 50 72 65 73
	   73 65 64 3A 20
	   00
 00000913		     1		.code
 00000913  52		     1		push	edx
 00000914  BA 00003C8E R     1		mov	edx,OFFSET ??0014
 00000919  E8 00000000 E     1		call	WriteString
 0000091E  5A		     1		pop	edx
					

					; How to exit prompt
					mGotoxy INFO_COLUMN_X, PLAY_AREA_Y + STARTING_DISTANCE
 0000091F  52		     1		push edx
 00000920  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 00000922  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000924  E8 00000000 E     1		call Gotoxy
 00000929  5A		     1		pop  edx
					mWrite "Press ESC to Quit"
 00003CA3		     1		.data		
 00003CA3 50 72 65 73 73     1		??0015 BYTE "Press ESC to Quit",0	
	   20 45 53 43 20
	   74 6F 20 51 75
	   69 74 00
 0000092A		     1		.code
 0000092A  52		     1		push	edx
 0000092B  BA 00003CA3 R     1		mov	edx,OFFSET ??0015
 00000930  E8 00000000 E     1		call	WriteString
 00000935  5A		     1		pop	edx

					; Move cursor out of center
					mGotoxy PLAY_AREA_X, PLAY_AREA_Y + STARTING_DISTANCE
 00000936  52		     1		push edx
 00000937  B6 1A	     1		mov  dh,PLAY_AREA_Y + STARTING_DISTANCE
 00000939  B2 0A	     1		mov  dl,PLAY_AREA_X
 0000093B  E8 00000000 E     1		call Gotoxy
 00000940  5A		     1		pop  edx
 00000941  C3				ret
 00000942			DisplayPlayArea endp


				;-------------------------------------------------------------------------------
				; DisplayScores
				;
				; Displays the stats that were visible in the info column.
				;-------------------------------------------------------------------------------
 00000942			DisplayScores proc
 = 00000023				STATS_SCREEN_X = 35
 = 0000000A				STATS_SCREEN_Y = 10

					; Game title
 00000942  B8 000000E0			mov eax, black + (yellow * 16)
 00000947  E8 00000000 E		call SetTextColor
					mGotoxy STATS_SCREEN_X, STATS_SCREEN_Y - LINE_SPACING
 0000094C  52		     1		push edx
 0000094D  B6 08	     1		mov  dh,STATS_SCREEN_Y - LINE_SPACING
 0000094F  B2 23	     1		mov  dl,STATS_SCREEN_X
 00000951  E8 00000000 E     1		call Gotoxy
 00000956  5A		     1		pop  edx
					mWrite "           STATS           "
 00003CB5		     1		.data		
 00003CB5 20 20 20 20 20     1		??0016 BYTE "           STATS           ",0	
	   20 20 20 20 20
	   20 53 54 41 54
	   53 20 20 20 20
	   20 20 20 20 20
	   20 20 00
 00000957		     1		.code
 00000957  52		     1		push	edx
 00000958  BA 00003CB5 R     1		mov	edx,OFFSET ??0016
 0000095D  E8 00000000 E     1		call	WriteString
 00000962  5A		     1		pop	edx

 00000963  B8 0000000E			mov eax, yellow+(black*16)	; Set to standard message color
 00000968  E8 00000000 E		call SetTextColor

					mGotoxy STATS_SCREEN_X, STATS_SCREEN_Y

 0000096D  52		     1		push edx
 0000096E  B6 0A	     1		mov  dh,STATS_SCREEN_Y
 00000970  B2 23	     1		mov  dl,STATS_SCREEN_X
 00000972  E8 00000000 E     1		call Gotoxy
 00000977  5A		     1		pop  edx
					mWrite "Minutes Elapsed   : "
 00003CD1		     1		.data		
 00003CD1 4D 69 6E 75 74     1		??0017 BYTE "Minutes Elapsed   : ",0	
	   65 73 20 45 6C
	   61 70 73 65 64
	   20 20 20 3A 20
	   00
 00000978		     1		.code
 00000978  52		     1		push	edx
 00000979  BA 00003CD1 R     1		mov	edx,OFFSET ??0017
 0000097E  E8 00000000 E     1		call	WriteString
 00000983  5A		     1		pop	edx
 00000984  A1 00003B8B R		mov eax, secondsPlayed
 00000989  E8 FFFFFCEB			call TimeFormat
 0000098E  B8 00000064			mov eax, TICK * 2
 00000993  E8 00000000 E		call Delay


					mGotoxy STATS_SCREEN_X, STATS_SCREEN_Y + LINE_SPACING
 00000998  52		     1		push edx
 00000999  B6 0C	     1		mov  dh,STATS_SCREEN_Y + LINE_SPACING
 0000099B  B2 23	     1		mov  dl,STATS_SCREEN_X
 0000099D  E8 00000000 E     1		call Gotoxy
 000009A2  5A		     1		pop  edx
					mWrite "Lines Cleared     : "
 00003CE6		     1		.data		
 00003CE6 4C 69 6E 65 73     1		??0018 BYTE "Lines Cleared     : ",0	
	   20 43 6C 65 61
	   72 65 64 20 20
	   20 20 20 3A 20
	   00
 000009A3		     1		.code
 000009A3  52		     1		push	edx
 000009A4  BA 00003CE6 R     1		mov	edx,OFFSET ??0018
 000009A9  E8 00000000 E     1		call	WriteString
 000009AE  5A		     1		pop	edx
 000009AF  B2 37			mov dl, STATS_SCREEN_X + SCORE_LABEL_LENGTH
 000009B1  B6 0C			mov dh, STATS_SCREEN_Y + LINE_SPACING
 000009B3  E8 FFFFFA4B			call UpdateCursorPos
 000009B8  A1 00003B8F R		mov eax, linesCleared
 000009BD  E8 0000007A			call CountUp
 000009C2  B8 00000064			mov eax, TICK * 2
 000009C7  E8 00000000 E		call Delay
					
					mGotoxy STATS_SCREEN_X, STATS_SCREEN_Y + LINE_SPACING * 2
 000009CC  52		     1		push edx
 000009CD  B6 0E	     1		mov  dh,STATS_SCREEN_Y + LINE_SPACING * 2
 000009CF  B2 23	     1		mov  dl,STATS_SCREEN_X
 000009D1  E8 00000000 E     1		call Gotoxy
 000009D6  5A		     1		pop  edx
					mWrite "Characters Typed  : "
 00003CFB		     1		.data		
 00003CFB 43 68 61 72 61     1		??0019 BYTE "Characters Typed  : ",0	
	   63 74 65 72 73
	   20 54 79 70 65
	   64 20 20 3A 20
	   00
 000009D7		     1		.code
 000009D7  52		     1		push	edx
 000009D8  BA 00003CFB R     1		mov	edx,OFFSET ??0019
 000009DD  E8 00000000 E     1		call	WriteString
 000009E2  5A		     1		pop	edx
 000009E3  B2 37			mov dl, STATS_SCREEN_X + SCORE_LABEL_LENGTH
 000009E5  B6 0E			mov dh, STATS_SCREEN_Y + LINE_SPACING * 2
 000009E7  E8 FFFFFA17			call UpdateCursorPos
 000009EC  A1 00003B83 R		mov eax, charsTyped
 000009F1  E8 00000046			call CountUp
 000009F6  B8 00000064			mov eax, TICK * 2
 000009FB  E8 00000000 E		call Delay

					mGotoxy STATS_SCREEN_X, STATS_SCREEN_Y + LINE_SPACING * 3
 00000A00  52		     1		push edx
 00000A01  B6 10	     1		mov  dh,STATS_SCREEN_Y + LINE_SPACING * 3
 00000A03  B2 23	     1		mov  dl,STATS_SCREEN_X
 00000A05  E8 00000000 E     1		call Gotoxy
 00000A0A  5A		     1		pop  edx
					mWrite "Backspaces Pressed: "
 00003D10		     1		.data		
 00003D10 42 61 63 6B 73     1		??001A BYTE "Backspaces Pressed: ",0	
	   70 61 63 65 73
	   20 50 72 65 73
	   73 65 64 3A 20
	   00
 00000A0B		     1		.code
 00000A0B  52		     1		push	edx
 00000A0C  BA 00003D10 R     1		mov	edx,OFFSET ??001A
 00000A11  E8 00000000 E     1		call	WriteString
 00000A16  5A		     1		pop	edx
 00000A17  A1 00003B87 R		mov eax, backspacesPressed
 00000A1C  E8 00000000 E		call WriteDec
 00000A21  B8 00000064			mov eax, TICK * 2
 00000A26  E8 00000000 E		call Delay

					mGotoxy STATS_SCREEN_X, STATS_SCREEN_Y + LINE_SPACING * 4
 00000A2B  52		     1		push edx
 00000A2C  B6 12	     1		mov  dh,STATS_SCREEN_Y + LINE_SPACING * 4
 00000A2E  B2 23	     1		mov  dl,STATS_SCREEN_X
 00000A30  E8 00000000 E     1		call Gotoxy
 00000A35  5A		     1		pop  edx
 00000A36  E8 00000000 E		call WaitMsg

 00000A3B  C3				ret
 00000A3C			DisplayScores endp


				;-------------------------------------------------------------------------------
				; CountUp
				;
				; Displays a rapid count up to a given number.
				; Receives: EAX = number to count up to
				;-------------------------------------------------------------------------------
 00000A3C			CountUp proc
 00000A3C  8B C8			mov ecx, eax
 00000A3E  BB 00000000			mov ebx, 0

 00000A43			UpCounter:
 00000A43  B8 00000005			mov eax, 5
 00000A48  E8 00000000 E		call Delay

					; Increment the counter and display the number
					mGotoxy cursorX, cursorY
 00000A4D  52		     1		push edx
 00000A4E  8A 35 00003B77 R  1		mov  dh,cursorY
 00000A54  8A 15 00003B76 R  1		mov  dl,cursorX
 00000A5A  E8 00000000 E     1		call Gotoxy
 00000A5F  5A		     1		pop  edx
 00000A60  43				inc ebx
 00000A61  8B C3			mov eax, ebx
 00000A63  E8 00000000 E		call WriteDec

 00000A68  E2 D9			loop UpCounter

 00000A6A  C3				ret
 00000A6B			CountUp endp


				;-------------------------------------------------------------------------------
				;                               LEADERBOARD
				;-------------------------------------------------------------------------------

 = 00000023			LEADERBOARD_X = 35
 = 0000000A			LEADERBOARD_Y = 10

 00000A6B			LEADERBOARD proc
 00000A6B  B8 0000000E			mov eax, yellow + (black * 16)
 00000A70  E8 00000000 E		call SetTextColor

					mWrite "not implemented"
 00003D25		     1		.data		
 00003D25 6E 6F 74 20 69     1		??001B BYTE "not implemented",0	
	   6D 70 6C 65 6D
	   65 6E 74 65 64
	   00
 00000A75		     1		.code
 00000A75  52		     1		push	edx
 00000A76  BA 00003D25 R     1		mov	edx,OFFSET ??001B
 00000A7B  E8 00000000 E     1		call	WriteString
 00000A80  5A		     1		pop	edx
 00000A81  E8 00000000 E		call Crlf
 00000A86  E8 00000000 E		call WaitMsg
 00000A8B  C3				ret
 00000A8C			LEADERBOARD endp


				end main
Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/11/23 22:00:55
TypingTutor.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003D35 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A8C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckLineStatus  . . . . . . . .	P Near	 00000615 _TEXT	Length= 00000064 Public STDCALL
  L_LineCheck  . . . . . . . . .	L Near	 00000630 _TEXT	
  IncorrectChar  . . . . . . . .	L Near	 0000064F _TEXT	
  ReturnBits . . . . . . . . . .	L Near	 00000654 _TEXT	
  L_ReturnBits . . . . . . . . .	L Near	 00000656 _TEXT	
  LineIsIncorrect  . . . . . . .	L Near	 00000673 _TEXT	
  LineIsCorrect  . . . . . . . .	L Near	 00000674 _TEXT	
ClearDisplayLine . . . . . . . .	P Near	 00000439 _TEXT	Length= 00000028 Public STDCALL
  spaceWrite . . . . . . . . . .	L Near	 00000444 _TEXT	
ClearLineStatus  . . . . . . . .	P Near	 000005F5 _TEXT	Length= 00000020 Public STDCALL
  StatusClearing . . . . . . . .	L Near	 000005FB _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseInputFile . . . . . . . . .	P Near	 00000319 _TEXT	Length= 0000000D Public STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CorrectInput . . . . . . . . . .	P Near	 000005AC _TEXT	Length= 0000001D Public STDCALL
CountUp  . . . . . . . . . . . .	P Near	 00000A3C _TEXT	Length= 0000002F Public STDCALL
  UpCounter  . . . . . . . . . .	L Near	 00000A43 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayPlayArea  . . . . . . . .	P Near	 0000086A _TEXT	Length= 000000D8 Public STDCALL
DisplayScores  . . . . . . . . .	P Near	 00000942 _TEXT	Length= 000000FA Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameOver . . . . . . . . . . . .	P Near	 00000759 _TEXT	Length= 000000BB Public STDCALL
  ResetColors  . . . . . . . . .	L Near	 0000075E _TEXT	
  ClearLines . . . . . . . . . .	L Near	 000007A6 _TEXT	
GameStart  . . . . . . . . . . .	P Near	 000006B1 _TEXT	Length= 000000A8 Public STDCALL
  Countdown  . . . . . . . . . .	L Near	 000006C0 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LEADERBOARD  . . . . . . . . . .	P Near	 00000A6B _TEXT	Length= 00000021 Public STDCALL
LevelCleared . . . . . . . . . .	P Near	 00000814 _TEXT	Length= 00000056 Public STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NewLine  . . . . . . . . . . . .	P Near	 00000423 _TEXT	Length= 00000016 Public STDCALL
NewPromptLine  . . . . . . . . .	P Near	 00000326 _TEXT	Length= 0000006C Public STDCALL
  ReturnToOriginalPos  . . . . .	L Near	 0000037E _TEXT	
OpenFile . . . . . . . . . . . .	P Near	 000002B0 _TEXT	Length= 00000069 Public STDCALL
  FileOk . . . . . . . . . . . .	L Near	 000002D2 _TEXT	
  CheckBufferSize  . . . . . . .	L Near	 00000300 _TEXT	
  Quit . . . . . . . . . . . . .	L Near	 00000318 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PLAY_GAME  . . . . . . . . . . .	P Near	 000000C5 _TEXT	Length= 000001EB Public STDCALL
  MainGameLoop . . . . . . . . .	L Near	 00000105 _TEXT	
  TimerNotSet  . . . . . . . . .	L Near	 0000012E _TEXT	
  AddLine  . . . . . . . . . . .	L Near	 0000015F _TEXT	
  IsMaxSpeed . . . . . . . . . .	L Near	 00000174 _TEXT	
  KeyRead  . . . . . . . . . . .	L Near	 0000017B _TEXT	
  CheckBackspace . . . . . . . .	L Near	 00000196 _TEXT	
  checkCharEqual . . . . . . . .	L Near	 000001BE _TEXT	
  CharNotEqual . . . . . . . . .	L Near	 000001E3 _TEXT	
  LineEndCheck . . . . . . . . .	L Near	 000001F2 _TEXT	
  ClearLine  . . . . . . . . . .	L Near	 0000021D _TEXT	
  finishCheck  . . . . . . . . .	L Near	 00000252 _TEXT	
  LevelComplete  . . . . . . . .	L Near	 00000281 _TEXT	
  GameStats  . . . . . . . . . .	L Near	 000002A5 _TEXT	
  Quit . . . . . . . . . . . . .	L Near	 000002AF _TEXT	
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReplacePreviousChar  . . . . . .	P Near	 00000461 _TEXT	Length= 00000033 Public STDCALL
ReprintPrompt  . . . . . . . . .	P Near	 00000392 _TEXT	Length= 00000033 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 0000039B _TEXT	
  writeChars . . . . . . . . . .	L Near	 000003AA _TEXT	
  continuePrintLoop  . . . . . .	L Near	 000003BF _TEXT	
  Quit . . . . . . . . . . . . .	L Near	 000003C3 _TEXT	
ResetGame  . . . . . . . . . . .	P Near	 00000518 _TEXT	Length= 00000094 Public STDCALL
  ResetColors  . . . . . . . . .	L Near	 00000578 _TEXT	
  ResetLineStatus  . . . . . . .	L Near	 00000593 _TEXT	
RevertLineStatus . . . . . . . .	P Near	 000005DF _TEXT	Length= 00000016 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TimeFormat . . . . . . . . . . .	P Near	 00000679 _TEXT	Length= 00000038 Public STDCALL
  TwoDigitSec  . . . . . . . . .	L Near	 000006AA _TEXT	
UpdateCursorPos  . . . . . . . .	P Near	 00000403 _TEXT	Length= 00000020 Public STDCALL
UpdateScoreboard . . . . . . . .	P Near	 00000494 _TEXT	Length= 00000084 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFromColorArr  . . . . . . .	P Near	 000003C5 _TEXT	Length= 0000001E Public STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToColorArr  . . . . . . . .	P Near	 000003E3 _TEXT	Length= 00000020 Public STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WrongInput . . . . . . . . . . .	P Near	 000005C9 _TEXT	Length= 00000016 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C5 Public STDCALL
  MainMenu . . . . . . . . . . .	L Near	 00000000 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000099 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000AF _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000000A _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000027 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000034 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000048 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00003B93 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00003BA6 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00003BBB _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00003BE2 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00003BE4 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00003BE6 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00003BE8 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00003BEF _DATA	
??000C . . . . . . . . . . . . .	Byte	 00003BF6 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00003C04 _DATA	
??000E . . . . . . . . . . . . .	Byte	 00003C12 _DATA	
??000F . . . . . . . . . . . . .	Byte	 00003C24 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00003C3A _DATA	
??0011 . . . . . . . . . . . . .	Byte	 00003C4F _DATA	
??0012 . . . . . . . . . . . . .	Byte	 00003C64 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00003C79 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 00003C8E _DATA	
??0015 . . . . . . . . . . . . .	Byte	 00003CA3 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 00003CB5 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 00003CD1 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 00003CE6 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 00003CFB _DATA	
??001A . . . . . . . . . . . . .	Byte	 00003D10 _DATA	
??001B . . . . . . . . . . . . .	Byte	 00003D25 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EntrySize  . . . . . . . . . . .	Number	 00000005h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_UNREAD  . . . . . . . . . .	Number	 -00000001h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INFO_COLUMN_X  . . . . . . . . .	Number	 00000050h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEADERBOARD_X  . . . . . . . . .	Number	 00000023h   
LEADERBOARD_Y  . . . . . . . . .	Number	 0000000Ah   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LENGTH  . . . . . . . . . .	Number	 00000040h   
LINE_SPACING . . . . . . . . . .	Number	 00000002h   
MAIN_MENU_X  . . . . . . . . . .	Number	 00000023h   
MAIN_MENU_Y  . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MenuTable  . . . . . . . . . . .	Byte	 00000000 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumberOfEntries  . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLAY_AREA_X  . . . . . . . . . .	Number	 0000000Ah   
PLAY_AREA_Y  . . . . . . . . . .	Number	 00000002h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCOREBOARD_Y . . . . . . . . . .	Number	 00000006h   
SCORE_LABEL_LENGTH . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SECOND_IN_TICKS  . . . . . . . .	Number	 00000014h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STARTING_DISTANCE  . . . . . . .	Number	 00000018h   
STARTING_PROGRESSION_SPEED . . .	Number	 00000014h   
STATS_SCREEN_X . . . . . . . . .	Number	 00000023h   
STATS_SCREEN_Y . . . . . . . . .	Number	 0000000Ah   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TICK . . . . . . . . . . . . . .	Number	 00000032h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
backspacesPressed  . . . . . . .	DWord	 00003B87 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charIdx  . . . . . . . . . . . .	DWord	 0000145A _DATA	
charsTyped . . . . . . . . . . .	DWord	 00003B83 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00003B76 _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00003B77 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
distanceFromTop  . . . . . . . .	Byte	 00003B78 _DATA	
divider  . . . . . . . . . . . .	Byte	 00000065 _DATA	
endingMsg  . . . . . . . . . . .	Byte	 000000A6 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00001452 _DATA	
filename . . . . . . . . . . . .	Byte	 00001449 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linePrintTicksElapsed  . . . . .	Byte	 00003B79 _DATA	
lineProgressSpeed  . . . . . . .	Byte	 00003B7E _DATA	
lineStatus . . . . . . . . . . .	DWord	 00003B6E _DATA	
linesCleared . . . . . . . . . .	DWord	 00003B8F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
secondsPlayed  . . . . . . . . .	DWord	 00003B8B _DATA	
textColors . . . . . . . . . . .	Word	 0000145E _DATA	
timerTicks . . . . . . . . . . .	DWord	 00003B7F _DATA	
typingPromptLeftBound  . . . . .	DWord	 00001456 _DATA	
typingPromptRightBound . . . . .	DWord	 00003B7A _DATA	
typingPromptSize . . . . . . . .	DWord	 00001445 _DATA	
typingPrompt . . . . . . . . . .	Byte	 000000BD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
