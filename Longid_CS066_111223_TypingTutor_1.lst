Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/10/23 15:49:35
TypingTutor.asm						     Page 1 - 1


				; TypingTutor.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
TypingTutor.asm(7) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 31			MenuTable BYTE '1'
 00000001  0000011D R			DWORD PLAY_GAME
 00000005 = 00000005		EntrySize = ($ - MenuTable)
 00000005  32				BYTE '2'
 00000006  0000030A R			DWORD LEADERBOARD
 0000000A = 00000002		NumberOfEntries = ($ - MenuTable) / EntrySize

 00000000			.code
 00000000			main proc
 = 0000001E				MAIN_MENU_X_OFFSET = 30
 = 00000008				MAIN_MENU_Y_OFFSET = 8
 = 00000002				LINE_SPACING = 2

 00000000			MainMenu:
					; Clear screen to prevent weird screen color
 00000000  B8 0000000F			mov eax, white+(black*16)
 00000005  E8 00000000 E		call SetTextColor
 0000000A  E8 00000000 E		call Clrscr

					; Display title
 0000000F  B8 000000E0			mov eax, black + (yellow * 16)
 00000014  E8 00000000 E		call SetTextColor

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET
 00000019  52		     1		push edx
 0000001A  B6 08	     1		mov  dh,MAIN_MENU_Y_OFFSET
 0000001C  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 0000001E  E8 00000000 E     1		call Gotoxy
 00000023  5A		     1		pop  edx
					mWrite "    TYPING TUTOR    "
 0000000A		     1		.data		
 0000000A 20 20 20 20 54     1		??0000 BYTE "    TYPING TUTOR    ",0	
	   59 50 49 4E 47
	   20 54 55 54 4F
	   52 20 20 20 20
	   00
 00000024		     1		.code
 00000024  52		     1		push	edx
 00000025  BA 0000000A R     1		mov	edx,OFFSET ??0000
 0000002A  E8 00000000 E     1		call	WriteString
 0000002F  5A		     1		pop	edx

					; Display menu options
 00000030  B8 0000000E			mov eax, yellow+(black*16)
 00000035  E8 00000000 E		call SetTextColor

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET + LINE_SPACING
 0000003A  52		     1		push edx
 0000003B  B6 0A	     1		mov  dh,MAIN_MENU_Y_OFFSET + LINE_SPACING
 0000003D  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 0000003F  E8 00000000 E     1		call Gotoxy
 00000044  5A		     1		pop  edx
					mWrite "1. Play Game"
 0000001F		     1		.data		
 0000001F 31 2E 20 50 6C     1		??0001 BYTE "1. Play Game",0	
	   61 79 20 47 61
	   6D 65 00
 00000045		     1		.code
 00000045  52		     1		push	edx
 00000046  BA 0000001F R     1		mov	edx,OFFSET ??0001
 0000004B  E8 00000000 E     1		call	WriteString
 00000050  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET + LINE_SPACING * 2
 00000051  52		     1		push edx
 00000052  B6 0C	     1		mov  dh,MAIN_MENU_Y_OFFSET + LINE_SPACING * 2
 00000054  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 00000056  E8 00000000 E     1		call Gotoxy
 0000005B  5A		     1		pop  edx
					mWrite "2. View Leaderboard"
 0000002C		     1		.data		
 0000002C 32 2E 20 56 69     1		??0002 BYTE "2. View Leaderboard",0	
	   65 77 20 4C 65
	   61 64 65 72 62
	   6F 61 72 64 00
 0000005C		     1		.code
 0000005C  52		     1		push	edx
 0000005D  BA 0000002C R     1		mov	edx,OFFSET ??0002
 00000062  E8 00000000 E     1		call	WriteString
 00000067  5A		     1		pop	edx

					mGotoxy MAIN_MENU_X_OFFSET, MAIN_MENU_Y_OFFSET + LINE_SPACING * 3
 00000068  52		     1		push edx
 00000069  B6 0E	     1		mov  dh,MAIN_MENU_Y_OFFSET + LINE_SPACING * 3
 0000006B  B2 1E	     1		mov  dl,MAIN_MENU_X_OFFSET
 0000006D  E8 00000000 E     1		call Gotoxy
 00000072  5A		     1		pop  edx
					mWrite ">>> "
 00000040		     1		.data		
 00000040 3E 3E 3E 20 00     1		??0003 BYTE ">>> ",0	
 00000073		     1		.code
 00000073  52		     1		push	edx
 00000074  BA 00000040 R     1		mov	edx,OFFSET ??0003
 00000079  E8 00000000 E     1		call	WriteString
 0000007E  5A		     1		pop	edx

 0000007F  E8 00000000 E		call ReadChar
 00000084  BB 00000000 R		mov ebx, OFFSET MenuTable
 00000089  B9 00000002			mov ecx, NumberOfEntries

 0000008E			L1:
 0000008E  3A 03			cmp al, [ebx]				; Inputted char = lookup value?
 00000090  75 12			jne L2

 00000092  E8 00000000 E		call Clrscr					; Run menu procedure
 00000097  FF 53 01			call NEAR PTR [ebx + 1]
 0000009A  E8 00000000 E		call Crlf
 0000009F  E9 FFFFFF5C			jmp MainMenu

 000000A4			L2:
 000000A4  81 C3 00000005		add ebx, EntrySize			; Go to next entry
 000000AA  E2 E2			loop L1

					exit						; If no matching entries found, exit
 000000AC  6A 00	   *	    push   +000000000h
 000000AE  E8 00000000 E   *	    call   ExitProcess


					invoke ExitProcess,0
 000000B3  6A 00	   *	    push   +000000000h
 000000B5  E8 00000000 E   *	    call   ExitProcess
 000000BA			main endp


				;-------------------------------------------------------------------------------
				;                                 MAIN GAME
				;-------------------------------------------------------------------------------


				; Play area bounds
 = 00000002			PLAY_AREA_Y_OFFSET = 2
 = 0000000A			PLAY_AREA_X_OFFSET = 10
 = 00000040			LINE_LENGTH = 64
 = 00000018			STARTING_DISTANCE = 24
 = 00000050			INFO_COLUMN_X = PLAY_AREA_X_OFFSET + LINE_LENGTH + 6
 = 00000006			SCOREBOARD_Y = PLAY_AREA_Y_OFFSET + 4
 = 00000014			SCORE_LABEL_LENGTH = 20

				; File reading utilities
 = 00001388			BUFFER_SIZE = 5000
 =-00000001			FILE_UNREAD = -1

				; Game logic timing
 = 00000032			TICK = 50	; in milliseconds
 = 00000014			SECOND_IN_TICKS = 20
 = 0000003C			STARTING_PROGRESSION_SPEED = SECOND_IN_TICKS * 3


 00000045			.data
					; Graphics elements
 00000045  00000040 [			divider BYTE LINE_LENGTH DUP("-"), 0
	    2D
	   ] 00
 00000086 2D 2D 2D 20 4C		endingMsg BYTE "--- Level Complete ---", 0
	   65 76 65 6C 20
	   43 6F 6D 70 6C
	   65 74 65 20 2D
	   2D 2D 00

					; For file handling
 0000009D  00001388 [			typingPrompt BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 00001425 00000000			typingPromptSize DWORD 0
 00001429 54 65 78 74 2E		filename BYTE "Text.txt", 0
	   74 78 74 00
 00001432 00000000			fileHandle HANDLE ?

					; Typing prompt data
 00001436 00000000			typingPromptLeftBound DWORD 0
 0000143A 00000000			charIdx DWORD 0
 0000143E  00001387 [			textColors WORD LENGTHOF typingPrompt - 1 DUP(black+(white*16)), 0
	    00F0
	   ] 0000

					; Cursor position data
 00003B4E 00				cursorX BYTE 0
 00003B4F 00				cursorY BYTE 0
 00003B50 18				distanceFromTop BYTE STARTING_DISTANCE

					; Typing prompt display timing
 00003B51 00				linePrintTicksElapsed BYTE 0
 00003B52 00000000			linePrintCharIdx DWORD 0
 00003B56 3C				lineProgressSpeed BYTE STARTING_PROGRESSION_SPEED

					; Scores
 00003B57 00000000			charsTyped DWORD 0
 00003B5B 00000000			backspacesPressed DWORD 0


 000000BA			.code
 000000BA			ResetGame proc
					; Reset scores
 000000BA  C7 05 00003B57 R		mov charsTyped, 0
	   00000000
 000000C4  C7 05 00003B5B R		mov backspacesPressed, 0
	   00000000

					; Reset starting distance
 000000CE  C6 05 00003B50 R		mov distanceFromTop, STARTING_DISTANCE
	   18

					; Reset typing prompt data
 000000D5  C7 05 00001436 R		mov typingPromptLeftBound, 0
	   00000000
 000000DF  C7 05 0000143A R		mov charIdx, 0
	   00000000

					; Reset timing
 000000E9  C6 05 00003B51 R		mov linePrintTicksElapsed, 0
	   00
 000000F0  C7 05 00003B52 R		mov linePrintCharIdx, 0
	   00000000
 000000FA  C6 05 00003B56 R		mov lineProgressSpeed, STARTING_PROGRESSION_SPEED
	   3C

 00000101  B9 00001388			mov ecx, LENGTHOF textColors
 00000106			ResetColors:
 00000106  66| C7 04 4D			mov textColors[ecx * TYPE textColors], black+(white*16)
	   0000143E R
	   00F0
 00000110  E2 F4			loop ResetColors
 00000112  66| C7 04 4D			mov textColors[ecx * TYPE textColors], black+(white*16)
	   0000143E R
	   00F0

 0000011C  C3				ret
 0000011D			ResetGame endp

 0000011D			PLAY_GAME proc
 0000011D  E8 FFFFFF98			call ResetGame

					; Read file to memory
 00000122  BA 00001429 R		mov edx, OFFSET filename
 00000127  E8 000001F0			call openFile
 0000012C  83 F8 FF			cmp eax, FILE_UNREAD
 0000012F  0F 84 000001BF		je quit
 00000135  E8 0000024B			call closeInputFile
					
					; Game title
 0000013A  B8 000000E0			mov eax, black + (yellow * 16)
 0000013F  E8 00000000 E		call SetTextColor
					mGotoxy INFO_COLUMN_X, PLAY_AREA_Y_OFFSET + 2
 00000144  52		     1		push edx
 00000145  B6 04	     1		mov  dh,PLAY_AREA_Y_OFFSET + 2
 00000147  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000149  E8 00000000 E     1		call Gotoxy
 0000014E  5A		     1		pop  edx
					mWrite "    TYPING TUTOR    "
 00003B5F		     1		.data		
 00003B5F 20 20 20 20 54     1		??0004 BYTE "    TYPING TUTOR    ",0	
	   59 50 49 4E 47
	   20 54 55 54 4F
	   52 20 20 20 20
	   00
 0000014F		     1		.code
 0000014F  52		     1		push	edx
 00000150  BA 00003B5F R     1		mov	edx,OFFSET ??0004
 00000155  E8 00000000 E     1		call	WriteString
 0000015A  5A		     1		pop	edx

					; Add top divider
 0000015B  B8 0000000E			mov eax, yellow + (black * 16)
 00000160  E8 00000000 E		call SetTextColor
					mGotoxy PLAY_AREA_X_OFFSET, PLAY_AREA_Y_OFFSET - 1
 00000165  52		     1		push edx
 00000166  B6 01	     1		mov  dh,PLAY_AREA_Y_OFFSET - 1
 00000168  B2 0A	     1		mov  dl,PLAY_AREA_X_OFFSET
 0000016A  E8 00000000 E     1		call Gotoxy
 0000016F  5A		     1		pop  edx
					mWriteString OFFSET divider
 00000170  52		     1		push edx
 00000171  BA 00000045 R     1		mov  edx,OFFSET OFFSET divider
 00000176  E8 00000000 E     1		call WriteString
 0000017B  5A		     1		pop  edx

					; Add bottom divider
					mGotoxy PLAY_AREA_X_OFFSET, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 0000017C  52		     1		push edx
 0000017D  B6 1A	     1		mov  dh,PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 0000017F  B2 0A	     1		mov  dl,PLAY_AREA_X_OFFSET
 00000181  E8 00000000 E     1		call Gotoxy
 00000186  5A		     1		pop  edx
					mWriteString OFFSET divider
 00000187  52		     1		push edx
 00000188  BA 00000045 R     1		mov  edx,OFFSET OFFSET divider
 0000018D  E8 00000000 E     1		call WriteString
 00000192  5A		     1		pop  edx

					; Scoreboard labels
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y
 00000193  52		     1		push edx
 00000194  B6 06	     1		mov  dh,SCOREBOARD_Y
 00000196  B2 50	     1		mov  dl,INFO_COLUMN_X
 00000198  E8 00000000 E     1		call Gotoxy
 0000019D  5A		     1		pop  edx
					mWrite "Characters Typed  : "
 00003B74		     1		.data		
 00003B74 43 68 61 72 61     1		??0005 BYTE "Characters Typed  : ",0	
	   63 74 65 72 73
	   20 54 79 70 65
	   64 20 20 3A 20
	   00
 0000019E		     1		.code
 0000019E  52		     1		push	edx
 0000019F  BA 00003B74 R     1		mov	edx,OFFSET ??0005
 000001A4  E8 00000000 E     1		call	WriteString
 000001A9  5A		     1		pop	edx
					mGotoxy INFO_COLUMN_X, SCOREBOARD_Y + LINE_SPACING
 000001AA  52		     1		push edx
 000001AB  B6 08	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING
 000001AD  B2 50	     1		mov  dl,INFO_COLUMN_X
 000001AF  E8 00000000 E     1		call Gotoxy
 000001B4  5A		     1		pop  edx
					mWrite "Backspaces Pressed: "
 00003B89		     1		.data		
 00003B89 42 61 63 6B 73     1		??0006 BYTE "Backspaces Pressed: ",0	
	   70 61 63 65 73
	   20 50 72 65 73
	   73 65 64 3A 20
	   00
 000001B5		     1		.code
 000001B5  52		     1		push	edx
 000001B6  BA 00003B89 R     1		mov	edx,OFFSET ??0006
 000001BB  E8 00000000 E     1		call	WriteString
 000001C0  5A		     1		pop	edx

					; How to exit prompt
					mGotoxy INFO_COLUMN_X, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 000001C1  52		     1		push edx
 000001C2  B6 1A	     1		mov  dh,PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
 000001C4  B2 50	     1		mov  dl,INFO_COLUMN_X
 000001C6  E8 00000000 E     1		call Gotoxy
 000001CB  5A		     1		pop  edx
					mWrite "Press ESC to Quit"
 00003B9E		     1		.data		
 00003B9E 50 72 65 73 73     1		??0007 BYTE "Press ESC to Quit",0	
	   20 45 53 43 20
	   74 6F 20 51 75
	   69 74 00
 000001CC		     1		.code
 000001CC  52		     1		push	edx
 000001CD  BA 00003B9E R     1		mov	edx,OFFSET ??0007
 000001D2  E8 00000000 E     1		call	WriteString
 000001D7  5A		     1		pop	edx

					; Set to standard color
 000001D8  B8 000000F0			mov eax, black + (white * 16)
 000001DD  E8 00000000 E		call SetTextColor

					; Initial cursor positioning
 000001E2  B6 02			mov dh, PLAY_AREA_Y_OFFSET
 000001E4  02 35 00003B50 R		add dh, distanceFromTop
 000001EA  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 000001EC  E8 0000027E			call UpdateCursorPos


 000001F1			MainGameLoop:
 000001F1  B8 00000032		    mov  eax, TICK    
 000001F6  E8 00000000 E	    call Delay           ; Delay to ensure proper key read

 000001FB  E8 00000300			call UpdateScoreboard

					; If time to print another line of text prompt, do so
 00000200  FE 05 00003B51 R		inc linePrintTicksElapsed
 00000206  A0 00003B56 R		mov al, lineProgressSpeed
 0000020B  38 05 00003B51 R		cmp linePrintTicksElapsed, al
 00000211  75 26			jne KeyRead						; Else, read key

					; If reached top of play area, game over
 00000213  FE 0D 00003B50 R		dec distanceFromTop
 00000219  80 3D 00003B50 R		cmp distanceFromTop, -1			
	   FF
 00000220  0F 84 000000CE		je quit

 00000226  E8 00000167			call NewPromptLine				; Print a new line of prompt
 0000022B  80 2D 00003B56 R		sub lineProgressSpeed, 1		; Increase the speed of progression
	   01
 00000232  C6 05 00003B51 R		mov linePrintTicksElapsed, 0	; Reset tick counter for display
	   00

 00000239			KeyRead:
 00000239  E8 00000000 E	    call ReadKey			; look for keyboard input
 0000023E  74 B1		    jz   MainGameLoop		; no key pressed yet

					; If at bottom of play area, don't do anything
 00000240  80 3D 00003B4F R		cmp cursorY, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
	   1A
 00000247  74 A8			je MainGameLoop

					; Check if escape pressed
 00000249  66| 83 FA 1B			cmp dx, VK_ESCAPE
 0000024D  75 01			jne CheckBackspace
 0000024F  C3				ret

 00000250			CheckBackspace:
					; Check if backspace pressed
 00000250  66| 83 FA 08			cmp dx, VK_BACK
 00000254  75 16			jne checkCharEqual				; If not backspace, process inputted character

					; Backspace was pressed
 00000256  80 3D 00003B4E R		cmp cursorX, PLAY_AREA_X_OFFSET	; If on char 0, don't do anything
	   0A
 0000025D  74 92			je MainGameLoop

 0000025F  FF 05 00003B5B R		inc backspacesPressed
 00000265  E8 00000263			call ReplacePreviousChar
 0000026A  EB 85			jmp MainGameLoop

 0000026C			checkCharEqual:
 0000026C  FF 05 00003B57 R		inc charsTyped

					; Compare input with text
 00000272  8B 3D 0000143A R		mov edi, charIdx
 00000278  3A 87 0000009D R		cmp    al, typingPrompt[edi]
 0000027E  75 0C			jne    charNotEqual

					; If character is equal
 00000280  B8 0000002F			mov eax, white + (green * 16)
 00000285  E8 000001C5			call WriteToColorArr
 0000028A  EB 0A			jmp lineEndCheck

 0000028C			charNotEqual:
 0000028C  B8 0000004F			mov eax, white + (red * 16)
 00000291  E8 000001B9			call WriteToColorArr

 00000296			lineEndCheck:
 00000296  80 3D 00003B4E R		cmp cursorX, LINE_LENGTH + PLAY_AREA_X_OFFSET
	   4A
 0000029D  75 24			jne finishCheck

					; Clear completed lines
 0000029F  8A 35 00003B4F R		mov dh, cursorY
 000002A5  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 000002A7  E8 000001C3			call UpdateCursorPos					; Move cursor position for display clearing
 000002AC  E8 000001F4			call ClearDisplayLine
 000002B1  E8 000001D9			call NewLine
 000002B6  83 05 00001436 R		add typingPromptLeftBound, LINE_LENGTH	; Move left bound for typing prompt forward
	   40
 000002BD  FE 05 00003B50 R		inc distanceFromTop						; Inc distance from top to account for cleared line

 000002C3			finishCheck:
 000002C3  FF 05 0000143A R		inc    charIdx
					; If not finished yet
 000002C9  80 BF 0000009E R		cmp    typingPrompt[edi + 1], 0
	   00

 000002D0  0F 85 FFFFFF1B		jne    MainGameLoop

					; Level complete message
 000002D6  E8 00000000 E		call Crlf
 000002DB  B8 0000002F			mov eax, white + (green * 16)
 000002E0  E8 00000000 E		call SetTextColor
 000002E5  E8 00000000 E		call Crlf
 000002EA  BA 00000086 R		mov edx, OFFSET endingMsg
 000002EF  E8 00000000 E		call WriteString

 000002F4			quit:
 000002F4  B8 0000000F			mov eax, white + (black * 16)
 000002F9  E8 00000000 E		call SetTextColor
					mGotoxy 0, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE + 4
 000002FE  52		     1		push edx
 000002FF  B6 1E	     1		mov  dh,PLAY_AREA_Y_OFFSET + STARTING_DISTANCE + 4
 00000301  B2 00	     1		mov  dl,0
 00000303  E8 00000000 E     1		call Gotoxy
 00000308  5A		     1		pop  edx
 00000309  C3				ret
 0000030A			PLAY_GAME endp


				;-------------------------------------------------------------------------------
				;                                LEADERBOARD
				;-------------------------------------------------------------------------------


 0000030A			.code
 0000030A			LEADERBOARD proc
					mWrite "Not implemented"
 00003BB0		     1		.data		
 00003BB0 4E 6F 74 20 69     1		??0008 BYTE "Not implemented",0	
	   6D 70 6C 65 6D
	   65 6E 74 65 64
	   00
 0000030A		     1		.code
 0000030A  52		     1		push	edx
 0000030B  BA 00003BB0 R     1		mov	edx,OFFSET ??0008
 00000310  E8 00000000 E     1		call	WriteString
 00000315  5A		     1		pop	edx
 00000316  E8 00000000 E		call ReadChar
 0000031B  C3				ret
 0000031C			LEADERBOARD endp



				;-------------------------------------------------------------------------------
				;                                PROCEDURES
				;-------------------------------------------------------------------------------


				;-------------------------------------------------------------------------------
				; openFile
				;
				; Opens the file whose name is stored in filename. Verifies file is opened and
				; that contents are within designated buffer size.
				; Receives: EDX = Offset of the filename to be opened.
				; Returns:  EAX = Bytes read (set to FILE_UNREAD if error occurs).
				;-------------------------------------------------------------------------------
 0000031C			openFile proc
 0000031C  E8 00000000 E		call OpenInputFile
 00000321  A3 00001432 R		mov fileHandle, eax

 00000326  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 00000329  75 13			jne file_ok
					mWrite <"Cannot open file", 0dh, 0ah>
 00003BC0		     1		.data		
 00003BC0 43 61 6E 6E 6F     1		??0009 BYTE "Cannot open file", 0dh, 0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 0000032B		     1		.code
 0000032B  52		     1		push	edx
 0000032C  BA 00003BC0 R     1		mov	edx,OFFSET ??0009
 00000331  E8 00000000 E     1		call	WriteString
 00000336  5A		     1		pop	edx
 00000337  B8 FFFFFFFF			mov eax, FILE_UNREAD
 0000033C  EB 46			jmp quit

 0000033E			file_ok:
 0000033E  BA 0000009D R		mov edx, OFFSET typingPrompt
 00000343  B9 00001388			mov ecx, BUFFER_SIZE
 00000348  E8 00000000 E		call ReadFromFile
 0000034D  A3 00001425 R		mov typingPromptSize, eax
 00000352  73 18			jnc check_buffer_size
					mWrite "Error reading file. "
 00003BD3		     1		.data		
 00003BD3 45 72 72 6F 72     1		??000A BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 00000354		     1		.code
 00000354  52		     1		push	edx
 00000355  BA 00003BD3 R     1		mov	edx,OFFSET ??000A
 0000035A  E8 00000000 E     1		call	WriteString
 0000035F  5A		     1		pop	edx
 00000360  E8 00000000 E		call WriteWindowsMsg
 00000365  B8 FFFFFFFF			mov eax, FILE_UNREAD
 0000036A  EB 18			jmp quit
					
 0000036C			check_buffer_size:
 0000036C  3D 00001388			cmp eax, BUFFER_SIZE
 00000371  72 11			jb quit
					mWrite <"Error: Buffer too small for the file", 0dh, 0ah>
 00003BE8		     1		.data		
 00003BE8 45 72 72 6F 72     1		??000B BYTE "Error: Buffer too small for the file", 0dh, 0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 00000373		     1		.code
 00000373  52		     1		push	edx
 00000374  BA 00003BE8 R     1		mov	edx,OFFSET ??000B
 00000379  E8 00000000 E     1		call	WriteString
 0000037E  5A		     1		pop	edx
 0000037F  B8 FFFFFFFF			mov eax, FILE_UNREAD

 00000384			quit:
 00000384  C3				ret
 00000385			openFile endp


				;-------------------------------------------------------------------------------
				; CloseInputFile
				;
				; Closes the file currently in fileHandle.
				;-------------------------------------------------------------------------------
 00000385			CloseInputFile proc USES eax
 00000385  50		   *	    push   eax
 00000386  A1 00001432 R		mov eax, fileHandle
 0000038B  E8 00000000 E		call CloseFile
					ret
 00000390  58		   *	    pop    eax
 00000391  C3		   *	    ret    00000h
 00000392			CloseInputFile endp


				;-------------------------------------------------------------------------------
				; NewPromptLine
				;
				; Writes a new line in the typing prompt.
				;-------------------------------------------------------------------------------
 00000392			NewPromptLine proc USES eax ebx ecx edx
					; Push cursor position to stack
 00000392  50		   *	    push   eax
 00000393  53		   *	    push   ebx
 00000394  51		   *	    push   ecx
 00000395  52		   *	    push   edx
 00000396  66| 0F B6 05			movzx ax, cursorX
	   00003B4E R
 0000039E  66| 50			push ax
 000003A0  66| 0F B6 05			movzx ax, cursorY
	   00003B4F R
 000003A8  66| 50			push ax

					; Set cursor position to rewrite block of text
 000003AA  8A 35 00003B50 R		mov dh, distanceFromTop
 000003B0  80 C6 02			add dh, PLAY_AREA_Y_OFFSET
 000003B3  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 000003B5  E8 000000B5			call UpdateCursorPos

					; Write text block
 000003BA  83 05 00003B52 R		add linePrintCharIdx, LINE_LENGTH
	   40
 000003C1  BA 0000009D R		mov edx, OFFSET typingPrompt
 000003C6  8B 0D 00003B52 R		mov ecx, linePrintCharIdx
 000003CC  8B 1D 00001436 R		mov ebx, typingPromptLeftBound
 000003D2  E8 00000027			call ReprintPrompt
					
 000003D7  E8 000000B3			call NewLine	; Move cursor to line below written prompt

					; If cursor is not at bottom of play area, clear the display line below prompt
 000003DC  80 3D 00003B4F R		cmp cursorY, PLAY_AREA_Y_OFFSET + STARTING_DISTANCE
	   1A
 000003E3  74 05			je ReturnToOriginalPos
 000003E5  E8 000000BB			call ClearDisplayLine
					
 000003EA			ReturnToOriginalPos:
					; Pop original cursor position to return to former position
 000003EA  66| 58			pop ax
 000003EC  FE C8			dec al			; Cursor y has to decrement to account for prompt having moved
 000003EE  8A F0			mov dh, al
 000003F0  66| 58			pop ax
 000003F2  8A D0			mov dl, al
 000003F4  E8 00000076			call UpdateCursorPos
					ret
 000003F9  5A		   *	    pop    edx
 000003FA  59		   *	    pop    ecx
 000003FB  5B		   *	    pop    ebx
 000003FC  58		   *	    pop    eax
 000003FD  C3		   *	    ret    00000h
 000003FE			NewPromptLine endp


				;-------------------------------------------------------------------------------
				; ReprintPrompt
				;
				; Reprints typing prompt using colors from text colors from colors array
				; Receives: EDX = OFFSET of typing prompt
				;			EBX = The index of typing prompt to start printing from
				;			ECX = The index of typing prompt to stop printing at
				;-------------------------------------------------------------------------------
 000003FE			ReprintPrompt proc USES edi
 000003FE  57		   *	    push   edi
 000003FF  BF 00000000		 	mov edi, 0				; Counter for if line length was reached
 00000404  8A 04 1A			mov al, [edx + ebx]

 00000407			printLoop:
					; If reached line length, start new line
 00000407  83 FF 40			cmp edi, LINE_LENGTH
 0000040A  75 0A			jne writeChars
 0000040C  E8 0000007E			call NewLine
 00000411  BF 00000000			mov edi, 0

 00000416			writeChars:
 00000416  E8 00000016			call WriteFromColorArr

					; Break if end of string
 0000041B  43				inc ebx
 0000041C  47				inc edi
 0000041D  8A 04 1A			mov al, [edx + ebx]
 00000420  3C 00			cmp al, 0
 00000422  75 07			jne continuePrintLoop

 00000424  E8 0000007C			call ClearDisplayLine	; Clear the rest of the display line
 00000429  EB 04			jmp quit

 0000042B			continuePrintLoop:
 0000042B  3B D9			cmp ebx, ecx
 0000042D  75 D8			jne printLoop
					
 0000042F			quit:
					ret
 0000042F  5F		   *	    pop    edi
 00000430  C3		   *	    ret    00000h
 00000431			ReprintPrompt endp


				;-------------------------------------------------------------------------------
				; WriteFromColorArr
				;
				; Writes a colored character to display using colors from text colors array.
				; Receives: EBX = Index of character in array to write
				;-------------------------------------------------------------------------------
 00000431			WriteFromColorArr proc USES ecx
 00000431  51		   *	    push   ecx
 00000432  FE 05 00003B4E R		inc cursorX
 00000438  B9 0000143E R		mov ecx, OFFSET textColors	; Get a reference to text colors array

 0000043D  8B 04 59			mov eax, [ecx + (ebx * TYPE textColors)]	; Select color from array
 00000440  E8 00000000 E		call SetTextColor

 00000445  8A 04 1A			mov al, [edx + ebx]			; Write character in selected color
 00000448  E8 00000000 E		call WriteChar
					
					ret
 0000044D  59		   *	    pop    ecx
 0000044E  C3		   *	    ret    00000h
 0000044F			WriteFromColorArr endp


				;-------------------------------------------------------------------------------
				; WriteToColorArr
				;
				; Writes a charater in a given color and saves that color to textColors array.
				; Receives: EAX = the color to write in and save to textColors array
				;			EDI = the index of color array to write to.
				;-------------------------------------------------------------------------------
 0000044F			WriteToColorArr proc
 0000044F  E8 00000000 E		call SetTextColor
 00000454  66| 89 04 7D			mov textColors[edi * TYPE textColors], ax	; Save color
	   0000143E R
 0000045C  0F B6 87			movzx eax, typingPrompt[edi]
	   0000009D R
 00000463  E8 00000000 E		call WriteChar
 00000468  FE 05 00003B4E R		inc cursorX
 0000046E  C3				ret
 0000046F			WriteToColorArr endp


				;-------------------------------------------------------------------------------
				; UpdateCursorPos
				;
				; Moves cursor to an (x,y) coordinate on screen and updates cursor location
				; varaibles accordingly.
				; Receives: DL = the x position to set cursor to
				;			DH = the y position to set cursor to
				;-------------------------------------------------------------------------------
 0000046F			UpdateCursorPos proc
 0000046F  88 15 00003B4E R		mov cursorX, dl
 00000475  88 35 00003B4F R		mov cursorY, dh
					mGotoxy cursorX, cursorY
 0000047B  52		     1		push edx
 0000047C  8A 35 00003B4F R  1		mov  dh,cursorY
 00000482  8A 15 00003B4E R  1		mov  dl,cursorX
 00000488  E8 00000000 E     1		call Gotoxy
 0000048D  5A		     1		pop  edx
 0000048E  C3				ret
 0000048F			UpdateCursorPos endp


				;-------------------------------------------------------------------------------
				; NewLine
				;
				; Moves cursor to the next line in play area.
				;-------------------------------------------------------------------------------
 0000048F			NewLine proc USES edx
 0000048F  52		   *	    push   edx
 00000490  FE 05 00003B4F R		inc cursorY
 00000496  8A 35 00003B4F R		mov dh, cursorY
 0000049C  B2 0A			mov dl, PLAY_AREA_X_OFFSET
 0000049E  E8 FFFFFFCC			call UpdateCursorPos
					ret
 000004A3  5A		   *	    pop    edx
 000004A4  C3		   *	    ret    00000h
 000004A5			NewLine endp


				;-------------------------------------------------------------------------------
				; ClearDisplayLine
				;
				; Clears a line of the play area starting from cursor's x coordinate.
				;-------------------------------------------------------------------------------
 000004A5			ClearDisplayLine proc USES eax
 000004A5  50		   *	    push   eax
 000004A6  B8 0000000F			mov eax, white+(black*16)
 000004AB  E8 00000000 E		call SetTextColor

 000004B0			spaceWrite:
					mWriteSpace
 00003C0F		     1	.data
 00003C0F  00000001 [	     1	??000C BYTE 1 DUP(' '),0
	    20
	   ] 00
 000004B0		     1	.code
 000004B0  52		     1		push	edx
 000004B1  BA 00003C0F R     1		mov	edx,OFFSET ??000C
 000004B6  E8 00000000 E     1		call	WriteString
 000004BB  5A		     1		pop	edx
 000004BC  FE 05 00003B4E R		inc cursorX
 000004C2  80 3D 00003B4E R		cmp cursorX, PLAY_AREA_X_OFFSET + LINE_LENGTH
	   4A
 000004C9  75 E5			jne spaceWrite
					
					ret
 000004CB  58		   *	    pop    eax
 000004CC  C3		   *	    ret    00000h
 000004CD			ClearDisplayLine endp


				;-------------------------------------------------------------------------------
				; ReplacePreviousChar
				;
				; Reverts color of previous character in play area and updates text color array
				; accordingly.
				;-------------------------------------------------------------------------------
 000004CD			ReplacePreviousChar proc
 000004CD  FE 0D 00003B4E R		dec cursorX
 000004D3  8A 35 00003B4F R		mov dh, cursorY
 000004D9  8A 15 00003B4E R		mov dl, cursorX
 000004DF  E8 FFFFFF8B			call UpdateCursorPos           ; Move cursor to previous char

 000004E4  B8 000000F0			mov eax, black + (white * 16)  ; Reverting color of char (this moves cursor forward)
 000004E9  FF 0D 0000143A R		dec charIdx         
 000004EF  8B 3D 0000143A R		mov edi, charIdx
 000004F5  E8 FFFFFF55			call WriteToColorArr

 000004FA  E8 FFFFFF70			call UpdateCursorPos           ; Move cursor back to previous char's space

 000004FF  C3				ret
 00000500			ReplacePreviousChar endp



 00000500			UpdateScoreboard proc USES eax edx
					; Push cursor position to stack
 00000500  50		   *	    push   eax
 00000501  52		   *	    push   edx
 00000502  66| 0F B6 05			movzx ax, cursorX
	   00003B4E R
 0000050A  66| 50			push ax
 0000050C  66| 0F B6 05			movzx ax, cursorY
	   00003B4F R
 00000514  66| 50			push ax

 00000516  B8 0000000E			mov eax, yellow+(black*16)
 0000051B  E8 00000000 E		call SetTextColor

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y
 00000520  52		     1		push edx
 00000521  B6 06	     1		mov  dh,SCOREBOARD_Y
 00000523  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 00000525  E8 00000000 E     1		call Gotoxy
 0000052A  5A		     1		pop  edx
 0000052B  A1 00003B57 R		mov eax, charsTyped
 00000530  E8 00000000 E		call WriteDec

					mGotoxy INFO_COLUMN_X + SCORE_LABEL_LENGTH, SCOREBOARD_Y + LINE_SPACING
 00000535  52		     1		push edx
 00000536  B6 08	     1		mov  dh,SCOREBOARD_Y + LINE_SPACING
 00000538  B2 64	     1		mov  dl,INFO_COLUMN_X + SCORE_LABEL_LENGTH
 0000053A  E8 00000000 E     1		call Gotoxy
 0000053F  5A		     1		pop  edx
 00000540  A1 00003B5B R		mov eax, backspacesPressed
 00000545  E8 00000000 E		call WriteDec

					; Pop original cursor position to return to former position
 0000054A  66| 58			pop ax
 0000054C  8A F0			mov dh, al
 0000054E  66| 58			pop ax
 00000550  8A D0			mov dl, al
 00000552  E8 FFFFFF18			call UpdateCursorPos

					ret
 00000557  5A		   *	    pop    edx
 00000558  58		   *	    pop    eax
 00000559  C3		   *	    ret    00000h
 0000055A			UpdateScoreboard endp


				end main
Microsoft (R) Macro Assembler Version 14.38.33133.0	    12/10/23 15:49:35
TypingTutor.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003C11 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000055A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearDisplayLine . . . . . . . .	P Near	 000004A5 _TEXT	Length= 00000028 Public STDCALL
  spaceWrite . . . . . . . . . .	L Near	 000004B0 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseInputFile . . . . . . . . .	P Near	 00000385 _TEXT	Length= 0000000D Public STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LEADERBOARD  . . . . . . . . . .	P Near	 0000030A _TEXT	Length= 00000012 Public STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NewLine  . . . . . . . . . . . .	P Near	 0000048F _TEXT	Length= 00000016 Public STDCALL
NewPromptLine  . . . . . . . . .	P Near	 00000392 _TEXT	Length= 0000006C Public STDCALL
  ReturnToOriginalPos  . . . . .	L Near	 000003EA _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PLAY_GAME  . . . . . . . . . . .	P Near	 0000011D _TEXT	Length= 000001ED Public STDCALL
  MainGameLoop . . . . . . . . .	L Near	 000001F1 _TEXT	
  KeyRead  . . . . . . . . . . .	L Near	 00000239 _TEXT	
  CheckBackspace . . . . . . . .	L Near	 00000250 _TEXT	
  checkCharEqual . . . . . . . .	L Near	 0000026C _TEXT	
  charNotEqual . . . . . . . . .	L Near	 0000028C _TEXT	
  lineEndCheck . . . . . . . . .	L Near	 00000296 _TEXT	
  finishCheck  . . . . . . . . .	L Near	 000002C3 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000002F4 _TEXT	
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReplacePreviousChar  . . . . . .	P Near	 000004CD _TEXT	Length= 00000033 Public STDCALL
ReprintPrompt  . . . . . . . . .	P Near	 000003FE _TEXT	Length= 00000033 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 00000407 _TEXT	
  writeChars . . . . . . . . . .	L Near	 00000416 _TEXT	
  continuePrintLoop  . . . . . .	L Near	 0000042B _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000042F _TEXT	
ResetGame  . . . . . . . . . . .	P Near	 000000BA _TEXT	Length= 00000063 Public STDCALL
  ResetColors  . . . . . . . . .	L Near	 00000106 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateCursorPos  . . . . . . . .	P Near	 0000046F _TEXT	Length= 00000020 Public STDCALL
UpdateScoreboard . . . . . . . .	P Near	 00000500 _TEXT	Length= 0000005A Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFromColorArr  . . . . . . .	P Near	 00000431 _TEXT	Length= 0000001E Public STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToColorArr  . . . . . . . .	P Near	 0000044F _TEXT	Length= 00000020 Public STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BA Public STDCALL
  MainMenu . . . . . . . . . . .	L Near	 00000000 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000008E _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000A4 _TEXT	
openFile . . . . . . . . . . . .	P Near	 0000031C _TEXT	Length= 00000069 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 0000033E _TEXT	
  check_buffer_size  . . . . . .	L Near	 0000036C _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000384 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000000A _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000001F _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000002C _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000040 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00003B5F _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00003B74 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00003B89 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00003B9E _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00003BB0 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00003BC0 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00003BD3 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00003BE8 _DATA	
??000C . . . . . . . . . . . . .	Byte	 00003C0F _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001388h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EntrySize  . . . . . . . . . . .	Number	 00000005h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_UNREAD  . . . . . . . . . .	Number	 -00000001h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INFO_COLUMN_X  . . . . . . . . .	Number	 00000050h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINE_LENGTH  . . . . . . . . . .	Number	 00000040h   
LINE_SPACING . . . . . . . . . .	Number	 00000002h   
MAIN_MENU_X_OFFSET . . . . . . .	Number	 0000001Eh   
MAIN_MENU_Y_OFFSET . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MenuTable  . . . . . . . . . . .	Byte	 00000000 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumberOfEntries  . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLAY_AREA_X_OFFSET . . . . . . .	Number	 0000000Ah   
PLAY_AREA_Y_OFFSET . . . . . . .	Number	 00000002h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCOREBOARD_Y . . . . . . . . . .	Number	 00000006h   
SCORE_LABEL_LENGTH . . . . . . .	Number	 00000014h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SECOND_IN_TICKS  . . . . . . . .	Number	 00000014h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STARTING_DISTANCE  . . . . . . .	Number	 00000018h   
STARTING_PROGRESSION_SPEED . . .	Number	 0000003Ch   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TICK . . . . . . . . . . . . . .	Number	 00000032h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
backspacesPressed  . . . . . . .	DWord	 00003B5B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charIdx  . . . . . . . . . . . .	DWord	 0000143A _DATA	
charsTyped . . . . . . . . . . .	DWord	 00003B57 _DATA	
cursorX  . . . . . . . . . . . .	Byte	 00003B4E _DATA	
cursorY  . . . . . . . . . . . .	Byte	 00003B4F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
distanceFromTop  . . . . . . . .	Byte	 00003B50 _DATA	
divider  . . . . . . . . . . . .	Byte	 00000045 _DATA	
endingMsg  . . . . . . . . . . .	Byte	 00000086 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00001432 _DATA	
filename . . . . . . . . . . . .	Byte	 00001429 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linePrintCharIdx . . . . . . . .	DWord	 00003B52 _DATA	
linePrintTicksElapsed  . . . . .	Byte	 00003B51 _DATA	
lineProgressSpeed  . . . . . . .	Byte	 00003B56 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
textColors . . . . . . . . . . .	Word	 0000143E _DATA	
typingPromptLeftBound  . . . . .	DWord	 00001436 _DATA	
typingPromptSize . . . . . . . .	DWord	 00001425 _DATA	
typingPrompt . . . . . . . . . .	Byte	 0000009D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
